
Peacock_Hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001340  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080013a  0080013a  0000140e  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000770  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ad82  00000000  00000000  0000299d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d9c  00000000  00000000  0000d71f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00015e07  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000013e0  00000000  00000000  000262c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001645f  00000000  00000000  000276a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007868  00000000  00000000  0003db03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001058  00000000  00000000  0004536b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a401  00000000  00000000  000463c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c1       	rjmp	.+838    	; 0x35c <__vector_5>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c1       	rjmp	.+766    	; 0x328 <__vector_10>
      2a:	00 00       	nop
      2c:	04 c7       	rjmp	.+3592   	; 0xe36 <__vector_11>
      2e:	00 00       	nop
      30:	a5 c7       	rjmp	.+3914   	; 0xf7c <__vector_12>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
	...

00000074 <ProductString>:
      74:	10 03 50 00 65 00 61 00 63 00 6f 00 63 00 6b 00     ..P.e.a.c.o.c.k.
	...

00000086 <ManufacturerString>:
      86:	20 03 43 00 68 00 69 00 6b 00 61 00 73 00 68 00      .C.h.i.k.a.s.h.
      96:	69 00 20 00 4d 00 69 00 79 00 61 00 6d 00 61 00     i. .M.i.y.a.m.a.
	...

000000a8 <LanguageString>:
      a8:	04 03 09 04                                         ....

000000ac <ConfigurationDescriptor>:
      ac:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............
      bc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      cc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      dc:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000ea <DeviceDescriptor>:
      ea:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      fa:	dc 01                                               ..

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d4 e0       	ldi	r29, 0x04	; 4
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e0 e4       	ldi	r30, 0x40	; 64
     110:	f3 e1       	ldi	r31, 0x13	; 19
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	aa 33       	cpi	r26, 0x3A	; 58
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	21 e0       	ldi	r18, 0x01	; 1
     120:	aa e3       	ldi	r26, 0x3A	; 58
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a9 34       	cpi	r26, 0x49	; 73
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	ba d1       	rcall	.+884    	; 0x4a4 <main>
     130:	0c 94 9e 09 	jmp	0x133c	; 0x133c <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     136:	29 2f       	mov	r18, r25
     138:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     13a:	22 30       	cpi	r18, 0x02	; 2
     13c:	31 05       	cpc	r19, r1
     13e:	59 f0       	breq	.+22     	; 0x156 <CALLBACK_USB_GetDescriptor+0x20>
     140:	23 30       	cpi	r18, 0x03	; 3
     142:	31 05       	cpc	r19, r1
     144:	69 f0       	breq	.+26     	; 0x160 <CALLBACK_USB_GetDescriptor+0x2a>
     146:	21 30       	cpi	r18, 0x01	; 1
     148:	31 05       	cpc	r19, r1
     14a:	29 f1       	breq	.+74     	; 0x196 <CALLBACK_USB_GetDescriptor+0x60>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	29 c0       	rjmp	.+82     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     156:	2e e3       	ldi	r18, 0x3E	; 62
     158:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     15a:	8c ea       	ldi	r24, 0xAC	; 172
     15c:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     15e:	24 c0       	rjmp	.+72     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     160:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	91 05       	cpc	r25, r1
     166:	59 f0       	breq	.+22     	; 0x17e <CALLBACK_USB_GetDescriptor+0x48>
     168:	82 30       	cpi	r24, 0x02	; 2
     16a:	91 05       	cpc	r25, r1
     16c:	71 f0       	breq	.+28     	; 0x18a <CALLBACK_USB_GetDescriptor+0x54>
     16e:	89 2b       	or	r24, r25
     170:	b9 f4       	brne	.+46     	; 0x1a0 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     172:	e8 ea       	ldi	r30, 0xA8	; 168
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	24 91       	lpm	r18, Z
     178:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     17a:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     17c:	15 c0       	rjmp	.+42     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     17e:	e6 e8       	ldi	r30, 0x86	; 134
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	24 91       	lpm	r18, Z
     184:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     186:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     18a:	e4 e7       	ldi	r30, 0x74	; 116
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	24 91       	lpm	r18, Z
     190:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     192:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     194:	09 c0       	rjmp	.+18     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     196:	22 e1       	ldi	r18, 0x12	; 18
     198:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     19a:	8a ee       	ldi	r24, 0xEA	; 234
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1a8:	fa 01       	movw	r30, r20
     1aa:	91 83       	std	Z+1, r25	; 0x01
     1ac:	80 83       	st	Z, r24
	return Size;
}
     1ae:	82 2f       	mov	r24, r18
     1b0:	93 2f       	mov	r25, r19
     1b2:	08 95       	ret

000001b4 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     1b4:	5c 9a       	sbi	0x0b, 4	; 11
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <toggle_e+0x4>
     1b8:	5c 98       	cbi	0x0b, 4	; 11
     1ba:	08 95       	ret

000001bc <lcd_write>:
     1bc:	cf 93       	push	r28
     1be:	c8 2f       	mov	r28, r24
     1c0:	66 23       	and	r22, r22
     1c2:	11 f0       	breq	.+4      	; 0x1c8 <lcd_write+0xc>
     1c4:	5e 9a       	sbi	0x0b, 6	; 11
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd_write+0xe>
     1c8:	5e 98       	cbi	0x0b, 6	; 11
     1ca:	5d 98       	cbi	0x0b, 5	; 11
     1cc:	53 9a       	sbi	0x0a, 3	; 10
     1ce:	52 9a       	sbi	0x0a, 2	; 10
     1d0:	51 9a       	sbi	0x0a, 1	; 10
     1d2:	50 9a       	sbi	0x0a, 0	; 10
     1d4:	58 98       	cbi	0x0b, 0	; 11
     1d6:	59 98       	cbi	0x0b, 1	; 11
     1d8:	5a 98       	cbi	0x0b, 2	; 11
     1da:	5b 98       	cbi	0x0b, 3	; 11
     1dc:	cc 23       	and	r28, r28
     1de:	0c f4       	brge	.+2      	; 0x1e2 <lcd_write+0x26>
     1e0:	58 9a       	sbi	0x0b, 0	; 11
     1e2:	c6 fd       	sbrc	r28, 6
     1e4:	59 9a       	sbi	0x0b, 1	; 11
     1e6:	c5 fd       	sbrc	r28, 5
     1e8:	5a 9a       	sbi	0x0b, 2	; 11
     1ea:	c4 fd       	sbrc	r28, 4
     1ec:	5b 9a       	sbi	0x0b, 3	; 11
     1ee:	e2 df       	rcall	.-60     	; 0x1b4 <toggle_e>
     1f0:	58 98       	cbi	0x0b, 0	; 11
     1f2:	59 98       	cbi	0x0b, 1	; 11
     1f4:	5a 98       	cbi	0x0b, 2	; 11
     1f6:	5b 98       	cbi	0x0b, 3	; 11
     1f8:	c3 fd       	sbrc	r28, 3
     1fa:	58 9a       	sbi	0x0b, 0	; 11
     1fc:	c2 fd       	sbrc	r28, 2
     1fe:	59 9a       	sbi	0x0b, 1	; 11
     200:	c1 fd       	sbrc	r28, 1
     202:	5a 9a       	sbi	0x0b, 2	; 11
     204:	c0 fd       	sbrc	r28, 0
     206:	5b 9a       	sbi	0x0b, 3	; 11
     208:	d5 df       	rcall	.-86     	; 0x1b4 <toggle_e>
     20a:	5b 9a       	sbi	0x0b, 3	; 11
     20c:	5a 9a       	sbi	0x0b, 2	; 11
     20e:	59 9a       	sbi	0x0b, 1	; 11
     210:	58 9a       	sbi	0x0b, 0	; 11
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <lcd_read>:
     216:	88 23       	and	r24, r24
     218:	11 f0       	breq	.+4      	; 0x21e <lcd_read+0x8>
     21a:	5e 9a       	sbi	0x0b, 6	; 11
     21c:	01 c0       	rjmp	.+2      	; 0x220 <lcd_read+0xa>
     21e:	5e 98       	cbi	0x0b, 6	; 11
     220:	5d 9a       	sbi	0x0b, 5	; 11
     222:	53 98       	cbi	0x0a, 3	; 10
     224:	52 98       	cbi	0x0a, 2	; 10
     226:	51 98       	cbi	0x0a, 1	; 10
     228:	50 98       	cbi	0x0a, 0	; 10
     22a:	5c 9a       	sbi	0x0b, 4	; 11
     22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_read+0x18>
     22e:	4b 99       	sbic	0x09, 3	; 9
     230:	02 c0       	rjmp	.+4      	; 0x236 <lcd_read+0x20>
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	01 c0       	rjmp	.+2      	; 0x238 <lcd_read+0x22>
     236:	80 e1       	ldi	r24, 0x10	; 16
     238:	4a 99       	sbic	0x09, 2	; 9
     23a:	80 62       	ori	r24, 0x20	; 32
     23c:	49 99       	sbic	0x09, 1	; 9
     23e:	80 64       	ori	r24, 0x40	; 64
     240:	48 99       	sbic	0x09, 0	; 9
     242:	80 68       	ori	r24, 0x80	; 128
     244:	5c 98       	cbi	0x0b, 4	; 11
     246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_read+0x32>
     248:	5c 9a       	sbi	0x0b, 4	; 11
     24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_read+0x36>
     24c:	4b 99       	sbic	0x09, 3	; 9
     24e:	81 60       	ori	r24, 0x01	; 1
     250:	4a 99       	sbic	0x09, 2	; 9
     252:	82 60       	ori	r24, 0x02	; 2
     254:	49 99       	sbic	0x09, 1	; 9
     256:	84 60       	ori	r24, 0x04	; 4
     258:	48 99       	sbic	0x09, 0	; 9
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	5c 98       	cbi	0x0b, 4	; 11
     25e:	08 95       	ret

00000260 <lcd_waitbusy>:
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	d9 df       	rcall	.-78     	; 0x216 <lcd_read>
     264:	88 23       	and	r24, r24
     266:	e4 f3       	brlt	.-8      	; 0x260 <lcd_waitbusy>
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_waitbusy+0xc>
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	d1 cf       	rjmp	.-94     	; 0x216 <lcd_read>

00000274 <lcd_command>:
     274:	cf 93       	push	r28
     276:	c8 2f       	mov	r28, r24
     278:	f3 df       	rcall	.-26     	; 0x260 <lcd_waitbusy>
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	8c 2f       	mov	r24, r28
     27e:	9e df       	rcall	.-196    	; 0x1bc <lcd_write>
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <lcd_clrscr>:
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	f6 cf       	rjmp	.-20     	; 0x274 <lcd_command>

00000288 <lcd_putc>:
     288:	cf 93       	push	r28
     28a:	c8 2f       	mov	r28, r24
     28c:	e9 df       	rcall	.-46     	; 0x260 <lcd_waitbusy>
     28e:	ca 30       	cpi	r28, 0x0A	; 10
     290:	41 f4       	brne	.+16     	; 0x2a2 <lcd_putc+0x1a>
     292:	80 34       	cpi	r24, 0x40	; 64
     294:	10 f4       	brcc	.+4      	; 0x29a <lcd_putc+0x12>
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	01 c0       	rjmp	.+2      	; 0x29c <lcd_putc+0x14>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	80 58       	subi	r24, 0x80	; 128
     29e:	ea df       	rcall	.-44     	; 0x274 <lcd_command>
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <lcd_putc+0x20>
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	8c 2f       	mov	r24, r28
     2a6:	8a df       	rcall	.-236    	; 0x1bc <lcd_write>
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <lcd_puts>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
     2b2:	89 91       	ld	r24, Y+
     2b4:	88 23       	and	r24, r24
     2b6:	21 f0       	breq	.+8      	; 0x2c0 <lcd_puts+0x14>
     2b8:	e7 df       	rcall	.-50     	; 0x288 <lcd_putc>
     2ba:	89 91       	ld	r24, Y+
     2bc:	81 11       	cpse	r24, r1
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <lcd_puts+0xc>
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     2ce:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     2d0:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     2d2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     2d4:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     2d6:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     2d8:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     2da:	50 9a       	sbi	0x0a, 0	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2dc:	e0 e0       	ldi	r30, 0x00	; 0
     2de:	fa ef       	ldi	r31, 0xFA	; 250
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     2e4:	5a 9a       	sbi	0x0b, 2	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     2e6:	5b 9a       	sbi	0x0b, 3	; 11
    lcd_e_toggle();
     2e8:	65 df       	rcall	.-310    	; 0x1b4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	fe e4       	ldi	r31, 0x4E	; 78
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     2f2:	60 df       	rcall	.-320    	; 0x1b4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	d1 e0       	ldi	r29, 0x01	; 1
     2f8:	fe 01       	movw	r30, r28
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x34>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     2fe:	5a df       	rcall	.-332    	; 0x1b4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     300:	fe 01       	movw	r30, r28
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     306:	5b 98       	cbi	0x0b, 3	; 11
    lcd_e_toggle();
     308:	55 df       	rcall	.-342    	; 0x1b4 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     30a:	21 97       	sbiw	r28, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     30e:	88 e2       	ldi	r24, 0x28	; 40
     310:	b1 df       	rcall	.-158    	; 0x274 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     312:	88 e0       	ldi	r24, 0x08	; 8
     314:	af df       	rcall	.-162    	; 0x274 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     316:	b6 df       	rcall	.-148    	; 0x284 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	ac df       	rcall	.-168    	; 0x274 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     31c:	81 2f       	mov	r24, r17
     31e:	aa df       	rcall	.-172    	; 0x274 <lcd_command>

}/* lcd_init */
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	08 95       	ret

00000328 <__vector_10>:

void toggleLED(bool sw){
	if(sw){
		LED_PORT |= (1 << LED_PIN);
	}else{
		LED_PORT &= ~(1 << LED_PIN);	
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	8f 93       	push	r24
     334:	9f 93       	push	r25
     336:	8f e5       	ldi	r24, 0x5F	; 95
     338:	9a ee       	ldi	r25, 0xEA	; 234
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <__vector_10+0x12>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <__vector_10+0x18>
     340:	00 00       	nop
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 3a 01 	sts	0x013A, r24
     348:	86 b1       	in	r24, 0x06	; 6
     34a:	10 92 3b 01 	sts	0x013B, r1
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <__vector_5>:
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	8f e5       	ldi	r24, 0x5F	; 95
     36c:	9a ee       	ldi	r25, 0xEA	; 234
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <__vector_5+0x12>
     372:	00 c0       	rjmp	.+0      	; 0x374 <__vector_5+0x18>
     374:	00 00       	nop
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 3a 01 	sts	0x013A, r24
     37c:	86 b1       	in	r24, 0x06	; 6
     37e:	10 92 3b 01 	sts	0x013B, r1
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <setupHardware>:
     390:	84 b7       	in	r24, 0x34	; 52
     392:	87 7f       	andi	r24, 0xF7	; 247
     394:	84 bf       	out	0x34, r24	; 52
     396:	88 e1       	ldi	r24, 0x18	; 24
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	80 93 60 00 	sts	0x0060, r24
     3a0:	10 92 60 00 	sts	0x0060, r1
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	80 93 61 00 	sts	0x0061, r24
     3b2:	90 93 61 00 	sts	0x0061, r25
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	2f c5       	rjmp	.+2654   	; 0xe18 <USB_Init>

000003ba <setupLED>:
     3ba:	3c 9a       	sbi	0x07, 4	; 7
     3bc:	44 9a       	sbi	0x08, 4	; 8
     3be:	08 95       	ret

000003c0 <setupButtons>:
	}
}

void setupButtons(void){
		
	BUTTON_BT0_PORT |= (1 << BUTTON_BT0_PIN); // pull up
     3c0:	44 9a       	sbi	0x08, 4	; 8
	BUTTON_BT1_PORT |= (1 << BUTTON_BT1_PIN); // pull up
     3c2:	45 9a       	sbi	0x08, 5	; 8
	BUTTON_BT2_PORT |= (1 << BUTTON_BT2_PIN); // pull up
     3c4:	46 9a       	sbi	0x08, 6	; 8
	BUTTON_BT3_PORT |= (1 << BUTTON_BT3_PIN); // pull up
     3c6:	47 9a       	sbi	0x08, 7	; 8

	PCICR |=  1 << PCIE1;
     3c8:	e8 e6       	ldi	r30, 0x68	; 104
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	82 60       	ori	r24, 0x02	; 2
     3d0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10);
     3d2:	ec e6       	ldi	r30, 0x6C	; 108
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	87 60       	ori	r24, 0x07	; 7
     3da:	80 83       	st	Z, r24
	
	EICRB |= 1 << ISC40;
     3dc:	ea e6       	ldi	r30, 0x6A	; 106
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	81 60       	ori	r24, 0x01	; 1
     3e4:	80 83       	st	Z, r24
	EIMSK |= 1 << INT4;
     3e6:	ec 9a       	sbi	0x1d, 4	; 29
     3e8:	08 95       	ret

000003ea <setupSPI>:
	
}

void setupSPI(void){
	
	SPI_DDR |= (1 << SPI_MOSI | 1 << SPI_SCK);
     3ea:	84 b1       	in	r24, 0x04	; 4
     3ec:	86 60       	ori	r24, 0x06	; 6
     3ee:	84 b9       	out	0x04, r24	; 4
	
	//Chip select output
	SPI_CS0_DDR  |= ( 1 << SPI_CS0_PIN);
     3f0:	27 9a       	sbi	0x04, 7	; 4
	SPI_CS1_DDR  |= ( 1 << SPI_CS1_PIN);
     3f2:	26 9a       	sbi	0x04, 6	; 4
	SPI_CS2_DDR  |= ( 1 << SPI_CS2_PIN);
     3f4:	25 9a       	sbi	0x04, 5	; 4
	SPI_CS3_DDR  |= ( 1 << SPI_CS3_PIN);
     3f6:	24 9a       	sbi	0x04, 4	; 4
	SPI_CS4_DDR  |= ( 1 << SPI_CS4_PIN);
     3f8:	20 9a       	sbi	0x04, 0	; 4
	
	//init with HI
	SPI_CS0_PORT |= ( 1 << SPI_CS0_PIN);
     3fa:	2f 9a       	sbi	0x05, 7	; 5
	SPI_CS1_PORT |= ( 1 << SPI_CS1_PIN);
     3fc:	2e 9a       	sbi	0x05, 6	; 5
	SPI_CS2_PORT |= ( 1 << SPI_CS2_PIN);
     3fe:	2d 9a       	sbi	0x05, 5	; 5
	SPI_CS3_PORT |= ( 1 << SPI_CS3_PIN);
     400:	2c 9a       	sbi	0x05, 4	; 5
	SPI_CS4_PORT |= ( 1 << SPI_CS4_PIN);
     402:	28 9a       	sbi	0x05, 0	; 5
	
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | (1 << SPR0); // enable SPI as Master at 1/16 speed
     404:	81 e5       	ldi	r24, 0x51	; 81
     406:	8c bd       	out	0x2c, r24	; 44
     408:	08 95       	ret

0000040a <spiReadWrite>:
}

uint8_t spiReadWrite(uint8_t out){
	SPDR = out;
     40a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))){};
     40c:	0d b4       	in	r0, 0x2d	; 45
     40e:	07 fe       	sbrs	r0, 7
     410:	fd cf       	rjmp	.-6      	; 0x40c <spiReadWrite+0x2>
	return SPDR;
     412:	8e b5       	in	r24, 0x2e	; 46
}
     414:	08 95       	ret

00000416 <clip>:

uint8_t clip(uint8_t in){
	if(in > DATA_MAX){
		in = DATA_MAX;
	}
	return in;
     416:	8b 3f       	cpi	r24, 0xFB	; 251
     418:	08 f0       	brcs	.+2      	; 0x41c <clip+0x6>
     41a:	8a ef       	ldi	r24, 0xFA	; 250
}
     41c:	08 95       	ret

0000041e <getRowData>:

uint16_t getRowData(volatile uint8_t *targetPort, uint8_t targetPin, uint8_t *buffer){
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
	uint8_t command, rvalue;
	uint16_t sum = 0;
	for(int i = 1; i < COLUMN+1; i++){
		*targetPort &= ~(1 << targetPin); //pin LO - start exchange
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9c 01       	movw	r18, r24
     43a:	02 c0       	rjmp	.+4      	; 0x440 <getRowData+0x22>
     43c:	22 0f       	add	r18, r18
     43e:	33 1f       	adc	r19, r19
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <getRowData+0x1e>
     444:	b2 2e       	mov	r11, r18
     446:	b0 94       	com	r11
		command = (SPI_SINGLE_MODE_MASK | i) << 2; // adjust to 8 bit
		spiReadWrite(command);
		rvalue = spiReadWrite(0);
		*targetPort |= 1 << targetPin; //pin HI - end exchange
     448:	a2 2e       	mov	r10, r18
		in = DATA_MAX;
	}
	return in;
}

uint16_t getRowData(volatile uint8_t *targetPort, uint8_t targetPin, uint8_t *buffer){
     44a:	6a 01       	movw	r12, r20
     44c:	3f ef       	ldi	r19, 0xFF	; 255
     44e:	c3 1a       	sub	r12, r19
     450:	d3 0a       	sbc	r13, r19
	uint8_t command, rvalue;
	uint16_t sum = 0;
	for(int i = 1; i < COLUMN+1; i++){
     452:	01 e0       	ldi	r16, 0x01	; 1
     454:	10 e0       	ldi	r17, 0x00	; 0
	return in;
}

uint16_t getRowData(volatile uint8_t *targetPort, uint8_t targetPin, uint8_t *buffer){
	uint8_t command, rvalue;
	uint16_t sum = 0;
     456:	e1 2c       	mov	r14, r1
     458:	f1 2c       	mov	r15, r1
	for(int i = 1; i < COLUMN+1; i++){
		*targetPort &= ~(1 << targetPin); //pin LO - start exchange
     45a:	88 81       	ld	r24, Y
     45c:	8b 21       	and	r24, r11
     45e:	88 83       	st	Y, r24
		command = (SPI_SINGLE_MODE_MASK | i) << 2; // adjust to 8 bit
     460:	c8 01       	movw	r24, r16
     462:	88 61       	ori	r24, 0x18	; 24
		spiReadWrite(command);
     464:	88 0f       	add	r24, r24
     466:	88 0f       	add	r24, r24
     468:	d0 df       	rcall	.-96     	; 0x40a <spiReadWrite>
		rvalue = spiReadWrite(0);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	ce df       	rcall	.-100    	; 0x40a <spiReadWrite>
		*targetPort |= 1 << targetPin; //pin HI - end exchange
     46e:	98 81       	ld	r25, Y
     470:	9a 29       	or	r25, r10
     472:	98 83       	st	Y, r25
		buffer[i] = clip(rvalue);
     474:	d0 df       	rcall	.-96     	; 0x416 <clip>
     476:	f6 01       	movw	r30, r12
     478:	81 93       	st	Z+, r24
     47a:	6f 01       	movw	r12, r30
		sum += buffer[i];
     47c:	e8 0e       	add	r14, r24
     47e:	f1 1c       	adc	r15, r1
}

uint16_t getRowData(volatile uint8_t *targetPort, uint8_t targetPin, uint8_t *buffer){
	uint8_t command, rvalue;
	uint16_t sum = 0;
	for(int i = 1; i < COLUMN+1; i++){
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	08 30       	cpi	r16, 0x08	; 8
     486:	11 05       	cpc	r17, r1
     488:	41 f7       	brne	.-48     	; 0x45a <getRowData+0x3c>
		*targetPort |= 1 << targetPin; //pin HI - end exchange
		buffer[i] = clip(rvalue);
		sum += buffer[i];
	}
	return sum;
}
     48a:	8e 2d       	mov	r24, r14
     48c:	9f 2d       	mov	r25, r15
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	08 95       	ret

000004a4 <main>:


int main(void)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	ad 97       	sbiw	r28, 0x2d	; 45
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[NUM_SENSORS + 5];
	uint8_t cmd[5];	
	uint16_t checksum;

	setupHardware();
     4b8:	6b df       	rcall	.-298    	; 0x390 <setupHardware>
	setupLED();
     4ba:	7f df       	rcall	.-258    	; 0x3ba <setupLED>
	setupSPI();
     4bc:	96 df       	rcall	.-212    	; 0x3ea <setupSPI>
	setupButtons();
     4be:	80 df       	rcall	.-256    	; 0x3c0 <setupButtons>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	2f ef       	ldi	r18, 0xFF	; 255
     4c2:	81 ee       	ldi	r24, 0xE1	; 225
     4c4:	94 e0       	ldi	r25, 0x04	; 4
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <main+0x22>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x2c>
     4d0:	00 00       	nop
	
	_delay_ms(100);
	lcd_init(LCD_DISP_ON);
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	f8 de       	rcall	.-528    	; 0x2c6 <lcd_init>
	lcd_clrscr();
     4d6:	d6 de       	rcall	.-596    	; 0x284 <lcd_clrscr>
	lcd_puts("Peacock ver. 0.3\n");
     4d8:	8b e1       	ldi	r24, 0x1B	; 27
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	e7 de       	rcall	.-562    	; 0x2ac <lcd_puts>
	lcd_puts("by C.Miyama");
     4de:	8d e2       	ldi	r24, 0x2D	; 45
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	e4 de       	rcall	.-568    	; 0x2ac <lcd_puts>
     4e4:	2f ef       	ldi	r18, 0xFF	; 255
     4e6:	83 ed       	ldi	r24, 0xD3	; 211
     4e8:	90 e3       	ldi	r25, 0x30	; 48
     4ea:	21 50       	subi	r18, 0x01	; 1
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x46>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x50>
     4f4:	00 00       	nop
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4f6:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     4f8:	fe 01       	movw	r30, r28
     4fa:	31 96       	adiw	r30, 0x01	; 1
	}
	return sum;
}


int main(void)
     4fc:	ce 01       	movw	r24, r28
     4fe:	88 96       	adiw	r24, 0x28	; 40
	lcd_puts("by C.Miyama");
	_delay_ms(1000);
	GlobalInterruptEnable();

	for(int i = 0; i < NUM_SENSORS + 4; i ++){
		buffer[i] = 0;
     500:	11 92       	st	Z+, r1
	lcd_puts("Peacock ver. 0.3\n");
	lcd_puts("by C.Miyama");
	_delay_ms(1000);
	GlobalInterruptEnable();

	for(int i = 0; i < NUM_SENSORS + 4; i ++){
     502:	e8 17       	cp	r30, r24
     504:	f9 07       	cpc	r31, r25
     506:	e1 f7       	brne	.-8      	; 0x500 <__stack+0x1>
	}
	
	while(1){
		
		if(gButtonUpdate > 0){
			cmd[0] = START_DELIMETER;
     508:	ee 24       	eor	r14, r14
     50a:	ea 94       	dec	r14
			cmd[1] = COMMAND_PACKET;
     50c:	0f 2e       	mov	r0, r31
     50e:	fc ef       	ldi	r31, 0xFC	; 252
     510:	bf 2e       	mov	r11, r31
     512:	f0 2d       	mov	r31, r0
			cmd[2] = PINC >> 4;
			cmd[3] = END_DELIMETER;
     514:	0f 2e       	mov	r0, r31
     516:	fe ef       	ldi	r31, 0xFE	; 254
     518:	ff 2e       	mov	r15, r31
     51a:	f0 2d       	mov	r31, r0
			gButtonUpdate = 0;
			CDC_Device_SendData(&VirtualSerial_CDC_Interface, (void*)cmd, 4);
		}
		buffer[0] = START_DELIMETER;
		buffer[1] = DATA_PACKET;
     51c:	0f 2e       	mov	r0, r31
     51e:	fd ef       	ldi	r31, 0xFD	; 253
     520:	df 2e       	mov	r13, r31
     522:	f0 2d       	mov	r31, r0
		checksum += getRowData(&SPI_CS1_PORT, SPI_CS1_PIN, &buffer[COLUMN + 2] );
		checksum += getRowData(&SPI_CS2_PORT, SPI_CS2_PIN, &buffer[COLUMN *2 + 2] );
		checksum += getRowData(&SPI_CS3_PORT, SPI_CS3_PIN, &buffer[COLUMN *3 + 2] );
		checksum += getRowData(&SPI_CS4_PORT, SPI_CS4_PIN, &buffer[COLUMN *4 + 2] );
		buffer[38] = (uint8_t)(checksum & 0xFF); // down cast 32
		if(buffer[38] > 0xFA){buffer[38] = 0xFA;}
     524:	0f 2e       	mov	r0, r31
     526:	fa ef       	ldi	r31, 0xFA	; 250
     528:	cf 2e       	mov	r12, r31
     52a:	f0 2d       	mov	r31, r0
		buffer[i] = 0;
	}
	
	while(1){
		
		if(gButtonUpdate > 0){
     52c:	80 91 3a 01 	lds	r24, 0x013A
     530:	88 23       	and	r24, r24
     532:	89 f0       	breq	.+34     	; 0x556 <__stack+0x57>
			cmd[0] = START_DELIMETER;
     534:	e9 a6       	std	Y+41, r14	; 0x29
			cmd[1] = COMMAND_PACKET;
     536:	ba a6       	std	Y+42, r11	; 0x2a
			cmd[2] = PINC >> 4;
     538:	86 b1       	in	r24, 0x06	; 6
     53a:	82 95       	swap	r24
     53c:	8f 70       	andi	r24, 0x0F	; 15
     53e:	8b a7       	std	Y+43, r24	; 0x2b
			cmd[3] = END_DELIMETER;
     540:	fc a6       	std	Y+44, r15	; 0x2c
			gButtonUpdate = 0;
     542:	10 92 3a 01 	sts	0x013A, r1
			CDC_Device_SendData(&VirtualSerial_CDC_Interface, (void*)cmd, 4);
     546:	44 e0       	ldi	r20, 0x04	; 4
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	be 01       	movw	r22, r28
     54c:	67 5d       	subi	r22, 0xD7	; 215
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	75 d0       	rcall	.+234    	; 0x640 <CDC_Device_SendData>
		}
		buffer[0] = START_DELIMETER;
     556:	e9 82       	std	Y+1, r14	; 0x01
		buffer[1] = DATA_PACKET;
     558:	da 82       	std	Y+2, r13	; 0x02
		checksum = buffer[1];
		checksum += getRowData(&SPI_CS0_PORT, SPI_CS0_PIN, &buffer[2] );
     55a:	ae 01       	movw	r20, r28
     55c:	4d 5f       	subi	r20, 0xFD	; 253
     55e:	5f 4f       	sbci	r21, 0xFF	; 255
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	85 e2       	ldi	r24, 0x25	; 37
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	5b df       	rcall	.-330    	; 0x41e <getRowData>
     568:	8c 01       	movw	r16, r24
		checksum += getRowData(&SPI_CS1_PORT, SPI_CS1_PIN, &buffer[COLUMN + 2] );
     56a:	ae 01       	movw	r20, r28
     56c:	46 5f       	subi	r20, 0xF6	; 246
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	66 e0       	ldi	r22, 0x06	; 6
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	53 df       	rcall	.-346    	; 0x41e <getRowData>
			CDC_Device_SendData(&VirtualSerial_CDC_Interface, (void*)cmd, 4);
		}
		buffer[0] = START_DELIMETER;
		buffer[1] = DATA_PACKET;
		checksum = buffer[1];
		checksum += getRowData(&SPI_CS0_PORT, SPI_CS0_PIN, &buffer[2] );
     578:	80 0f       	add	r24, r16
     57a:	91 1f       	adc	r25, r17
		checksum += getRowData(&SPI_CS1_PORT, SPI_CS1_PIN, &buffer[COLUMN + 2] );
     57c:	8c 01       	movw	r16, r24
     57e:	03 50       	subi	r16, 0x03	; 3
     580:	1f 4f       	sbci	r17, 0xFF	; 255
		checksum += getRowData(&SPI_CS2_PORT, SPI_CS2_PIN, &buffer[COLUMN *2 + 2] );
     582:	ae 01       	movw	r20, r28
     584:	4f 5e       	subi	r20, 0xEF	; 239
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	65 e0       	ldi	r22, 0x05	; 5
     58a:	85 e2       	ldi	r24, 0x25	; 37
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	47 df       	rcall	.-370    	; 0x41e <getRowData>
     590:	08 0f       	add	r16, r24
     592:	19 1f       	adc	r17, r25
		checksum += getRowData(&SPI_CS3_PORT, SPI_CS3_PIN, &buffer[COLUMN *3 + 2] );
     594:	ae 01       	movw	r20, r28
     596:	48 5e       	subi	r20, 0xE8	; 232
     598:	5f 4f       	sbci	r21, 0xFF	; 255
     59a:	64 e0       	ldi	r22, 0x04	; 4
     59c:	85 e2       	ldi	r24, 0x25	; 37
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	3e df       	rcall	.-388    	; 0x41e <getRowData>
     5a2:	08 0f       	add	r16, r24
     5a4:	19 1f       	adc	r17, r25
		checksum += getRowData(&SPI_CS4_PORT, SPI_CS4_PIN, &buffer[COLUMN *4 + 2] );
     5a6:	ae 01       	movw	r20, r28
     5a8:	41 5e       	subi	r20, 0xE1	; 225
     5aa:	5f 4f       	sbci	r21, 0xFF	; 255
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	85 e2       	ldi	r24, 0x25	; 37
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	35 df       	rcall	.-406    	; 0x41e <getRowData>
		buffer[38] = (uint8_t)(checksum & 0xFF); // down cast 32
     5b4:	80 0f       	add	r24, r16
		if(buffer[38] > 0xFA){buffer[38] = 0xFA;}
     5b6:	8b 3f       	cpi	r24, 0xFB	; 251
     5b8:	10 f4       	brcc	.+4      	; 0x5be <__stack+0xbf>
		checksum += getRowData(&SPI_CS0_PORT, SPI_CS0_PIN, &buffer[2] );
		checksum += getRowData(&SPI_CS1_PORT, SPI_CS1_PIN, &buffer[COLUMN + 2] );
		checksum += getRowData(&SPI_CS2_PORT, SPI_CS2_PIN, &buffer[COLUMN *2 + 2] );
		checksum += getRowData(&SPI_CS3_PORT, SPI_CS3_PIN, &buffer[COLUMN *3 + 2] );
		checksum += getRowData(&SPI_CS4_PORT, SPI_CS4_PIN, &buffer[COLUMN *4 + 2] );
		buffer[38] = (uint8_t)(checksum & 0xFF); // down cast 32
     5ba:	8f a3       	std	Y+39, r24	; 0x27
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__stack+0xc1>
		if(buffer[38] > 0xFA){buffer[38] = 0xFA;}
     5be:	cf a2       	std	Y+39, r12	; 0x27
		buffer[39] = END_DELIMETER;
     5c0:	f8 a6       	std	Y+40, r15	; 0x28
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, (void*)buffer, 40); // 35x data 2x delimeter 1x type 1x checksum
     5c2:	48 e2       	ldi	r20, 0x28	; 40
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	be 01       	movw	r22, r28
     5c8:	6f 5f       	subi	r22, 0xFF	; 255
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	37 d0       	rcall	.+110    	; 0x640 <CDC_Device_SendData>
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	9b d0       	rcall	.+310    	; 0x70e <CDC_Device_ReceiveByte>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	82 d0       	rcall	.+260    	; 0x6e2 <CDC_Device_USBTask>
		USB_USBTask();
     5de:	93 d6       	rcall	.+3366   	; 0x1306 <USB_USBTask>
	}
     5e0:	a5 cf       	rjmp	.-182    	; 0x52c <__stack+0x2d>

000005e2 <EVENT_USB_Device_Connect>:
}

void EVENT_USB_Device_Connect(void)
{
     5e2:	08 95       	ret

000005e4 <EVENT_USB_Device_Disconnect>:

}

void EVENT_USB_Device_Disconnect(void)
{
     5e4:	08 95       	ret

000005e6 <EVENT_USB_Device_ConfigurationChanged>:
}

void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <CDC_Device_ConfigureEndpoints>

000005ec <EVENT_USB_Device_ControlRequest>:
}

void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	c3 c0       	rjmp	.+390    	; 0x778 <CDC_Device_ProcessControlRequest>

000005f2 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
     5f8:	40 96       	adiw	r24, 0x10	; 16
     5fa:	e8 2f       	mov	r30, r24
     5fc:	f9 2f       	mov	r31, r25
     5fe:	8b e0       	ldi	r24, 0x0B	; 11
     600:	df 01       	movw	r26, r30
     602:	1d 92       	st	X+, r1
     604:	8a 95       	dec	r24
     606:	e9 f7       	brne	.-6      	; 0x602 <CDC_Device_ConfigureEndpoints+0x10>
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	8c 83       	std	Y+4, r24	; 0x04
     60c:	89 87       	std	Y+9, r24	; 0x09
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	8e 87       	std	Y+14, r24	; 0x0e
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	ce 01       	movw	r24, r28
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	ff d2       	rcall	.+1534   	; 0xc18 <Endpoint_ConfigureEndpointTable>
     61a:	88 23       	and	r24, r24
     61c:	59 f0       	breq	.+22     	; 0x634 <CDC_Device_ConfigureEndpoints+0x42>
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	ce 01       	movw	r24, r28
     622:	06 96       	adiw	r24, 0x06	; 6
     624:	f9 d2       	rcall	.+1522   	; 0xc18 <Endpoint_ConfigureEndpointTable>
     626:	88 23       	and	r24, r24
     628:	39 f0       	breq	.+14     	; 0x638 <CDC_Device_ConfigureEndpoints+0x46>
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	ce 01       	movw	r24, r28
     62e:	0b 96       	adiw	r24, 0x0b	; 11
     630:	f3 d2       	rcall	.+1510   	; 0xc18 <Endpoint_ConfigureEndpointTable>
     632:	03 c0       	rjmp	.+6      	; 0x63a <CDC_Device_ConfigureEndpoints+0x48>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	01 c0       	rjmp	.+2      	; 0x63a <CDC_Device_ConfigureEndpoints+0x48>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <CDC_Device_SendData>:
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	fb 01       	movw	r30, r22
     646:	ba 01       	movw	r22, r20
     648:	20 91 40 01 	lds	r18, 0x0140
     64c:	24 30       	cpi	r18, 0x04	; 4
     64e:	a9 f4       	brne	.+42     	; 0x67a <CDC_Device_SendData+0x3a>
     650:	dc 01       	movw	r26, r24
     652:	54 96       	adiw	r26, 0x14	; 20
     654:	0d 91       	ld	r16, X+
     656:	1d 91       	ld	r17, X+
     658:	2d 91       	ld	r18, X+
     65a:	3c 91       	ld	r19, X
     65c:	57 97       	sbiw	r26, 0x17	; 23
     65e:	01 2b       	or	r16, r17
     660:	02 2b       	or	r16, r18
     662:	03 2b       	or	r16, r19
     664:	61 f0       	breq	.+24     	; 0x67e <CDC_Device_SendData+0x3e>
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	8c 91       	ld	r24, X
     66a:	8f 70       	andi	r24, 0x0F	; 15
     66c:	80 93 e9 00 	sts	0x00E9, r24
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	cf 01       	movw	r24, r30
     676:	20 d1       	rcall	.+576    	; 0x8b8 <Endpoint_Write_Stream_LE>
     678:	03 c0       	rjmp	.+6      	; 0x680 <CDC_Device_SendData+0x40>
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	01 c0       	rjmp	.+2      	; 0x680 <CDC_Device_SendData+0x40>
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <CDC_Device_Flush>:
     686:	20 91 40 01 	lds	r18, 0x0140
     68a:	24 30       	cpi	r18, 0x04	; 4
     68c:	11 f5       	brne	.+68     	; 0x6d2 <CDC_Device_Flush+0x4c>
     68e:	fc 01       	movw	r30, r24
     690:	44 89       	ldd	r20, Z+20	; 0x14
     692:	55 89       	ldd	r21, Z+21	; 0x15
     694:	66 89       	ldd	r22, Z+22	; 0x16
     696:	77 89       	ldd	r23, Z+23	; 0x17
     698:	45 2b       	or	r20, r21
     69a:	46 2b       	or	r20, r22
     69c:	47 2b       	or	r20, r23
     69e:	d9 f0       	breq	.+54     	; 0x6d6 <CDC_Device_Flush+0x50>
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
     6a2:	8f 70       	andi	r24, 0x0F	; 15
     6a4:	80 93 e9 00 	sts	0x00E9, r24
     6a8:	80 91 f2 00 	lds	r24, 0x00F2
     6ac:	88 23       	and	r24, r24
     6ae:	a9 f0       	breq	.+42     	; 0x6da <CDC_Device_Flush+0x54>
     6b0:	e8 ee       	ldi	r30, 0xE8	; 232
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	90 81       	ld	r25, Z
     6b8:	9e 77       	andi	r25, 0x7E	; 126
     6ba:	90 83       	st	Z, r25
     6bc:	85 fd       	sbrc	r24, 5
     6be:	0f c0       	rjmp	.+30     	; 0x6de <CDC_Device_Flush+0x58>
     6c0:	37 d3       	rcall	.+1646   	; 0xd30 <Endpoint_WaitUntilReady>
     6c2:	81 11       	cpse	r24, r1
     6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <CDC_Device_Flush+0x5a>
     6c6:	e8 ee       	ldi	r30, 0xE8	; 232
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	90 81       	ld	r25, Z
     6cc:	9e 77       	andi	r25, 0x7E	; 126
     6ce:	90 83       	st	Z, r25
     6d0:	08 95       	ret
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	08 95       	ret
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	08 95       	ret
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	08 95       	ret
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	08 95       	ret

000006e2 <CDC_Device_USBTask>:
     6e2:	20 91 40 01 	lds	r18, 0x0140
     6e6:	24 30       	cpi	r18, 0x04	; 4
     6e8:	89 f4       	brne	.+34     	; 0x70c <CDC_Device_USBTask+0x2a>
     6ea:	fc 01       	movw	r30, r24
     6ec:	44 89       	ldd	r20, Z+20	; 0x14
     6ee:	55 89       	ldd	r21, Z+21	; 0x15
     6f0:	66 89       	ldd	r22, Z+22	; 0x16
     6f2:	77 89       	ldd	r23, Z+23	; 0x17
     6f4:	45 2b       	or	r20, r21
     6f6:	46 2b       	or	r20, r22
     6f8:	47 2b       	or	r20, r23
     6fa:	41 f0       	breq	.+16     	; 0x70c <CDC_Device_USBTask+0x2a>
     6fc:	21 81       	ldd	r18, Z+1	; 0x01
     6fe:	2f 70       	andi	r18, 0x0F	; 15
     700:	20 93 e9 00 	sts	0x00E9, r18
     704:	20 91 e8 00 	lds	r18, 0x00E8
     708:	20 fd       	sbrc	r18, 0
     70a:	bd cf       	rjmp	.-134    	; 0x686 <CDC_Device_Flush>
     70c:	08 95       	ret

0000070e <CDC_Device_ReceiveByte>:
     70e:	20 91 40 01 	lds	r18, 0x0140
     712:	24 30       	cpi	r18, 0x04	; 4
     714:	29 f5       	brne	.+74     	; 0x760 <CDC_Device_ReceiveByte+0x52>
     716:	fc 01       	movw	r30, r24
     718:	44 89       	ldd	r20, Z+20	; 0x14
     71a:	55 89       	ldd	r21, Z+21	; 0x15
     71c:	66 89       	ldd	r22, Z+22	; 0x16
     71e:	77 89       	ldd	r23, Z+23	; 0x17
     720:	45 2b       	or	r20, r21
     722:	46 2b       	or	r20, r22
     724:	47 2b       	or	r20, r23
     726:	f9 f0       	breq	.+62     	; 0x766 <CDC_Device_ReceiveByte+0x58>
     728:	86 81       	ldd	r24, Z+6	; 0x06
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	80 93 e9 00 	sts	0x00E9, r24
     730:	80 91 e8 00 	lds	r24, 0x00E8
     734:	82 ff       	sbrs	r24, 2
     736:	1a c0       	rjmp	.+52     	; 0x76c <CDC_Device_ReceiveByte+0x5e>
     738:	80 91 f2 00 	lds	r24, 0x00F2
     73c:	88 23       	and	r24, r24
     73e:	21 f0       	breq	.+8      	; 0x748 <CDC_Device_ReceiveByte+0x3a>
     740:	20 91 f1 00 	lds	r18, 0x00F1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <CDC_Device_ReceiveByte+0x3e>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	80 91 f2 00 	lds	r24, 0x00F2
     750:	81 11       	cpse	r24, r1
     752:	0e c0       	rjmp	.+28     	; 0x770 <CDC_Device_ReceiveByte+0x62>
     754:	e8 ee       	ldi	r30, 0xE8	; 232
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	8b 77       	andi	r24, 0x7B	; 123
     75c:	80 83       	st	Z, r24
     75e:	08 c0       	rjmp	.+16     	; 0x770 <CDC_Device_ReceiveByte+0x62>
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	3f ef       	ldi	r19, 0xFF	; 255
     764:	05 c0       	rjmp	.+10     	; 0x770 <CDC_Device_ReceiveByte+0x62>
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	3f ef       	ldi	r19, 0xFF	; 255
     76a:	02 c0       	rjmp	.+4      	; 0x770 <CDC_Device_ReceiveByte+0x62>
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	3f ef       	ldi	r19, 0xFF	; 255
     770:	82 2f       	mov	r24, r18
     772:	93 2f       	mov	r25, r19
     774:	08 95       	ret

00000776 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     776:	08 95       	ret

00000778 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     77e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     782:	83 ff       	sbrs	r24, 3
     784:	96 c0       	rjmp	.+300    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     786:	88 81       	ld	r24, Y
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	20 91 45 01 	lds	r18, 0x0145
     78e:	30 91 46 01 	lds	r19, 0x0146
     792:	28 17       	cp	r18, r24
     794:	39 07       	cpc	r19, r25
     796:	09 f0       	breq	.+2      	; 0x79a <CDC_Device_ProcessControlRequest+0x22>
     798:	8c c0       	rjmp	.+280    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
	  return;

	switch (USB_ControlRequest.bRequest)
     79a:	80 91 42 01 	lds	r24, 0x0142
     79e:	81 32       	cpi	r24, 0x21	; 33
     7a0:	61 f0       	breq	.+24     	; 0x7ba <CDC_Device_ProcessControlRequest+0x42>
     7a2:	20 f4       	brcc	.+8      	; 0x7ac <CDC_Device_ProcessControlRequest+0x34>
     7a4:	80 32       	cpi	r24, 0x20	; 32
     7a6:	09 f0       	breq	.+2      	; 0x7aa <CDC_Device_ProcessControlRequest+0x32>
     7a8:	84 c0       	rjmp	.+264    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
     7aa:	36 c0       	rjmp	.+108    	; 0x818 <CDC_Device_ProcessControlRequest+0xa0>
     7ac:	82 32       	cpi	r24, 0x22	; 34
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <CDC_Device_ProcessControlRequest+0x3a>
     7b0:	5f c0       	rjmp	.+190    	; 0x870 <CDC_Device_ProcessControlRequest+0xf8>
     7b2:	83 32       	cpi	r24, 0x23	; 35
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <CDC_Device_ProcessControlRequest+0x40>
     7b6:	7d c0       	rjmp	.+250    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
     7b8:	6e c0       	rjmp	.+220    	; 0x896 <CDC_Device_ProcessControlRequest+0x11e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     7ba:	80 91 41 01 	lds	r24, 0x0141
     7be:	81 3a       	cpi	r24, 0xA1	; 161
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <CDC_Device_ProcessControlRequest+0x4c>
     7c2:	77 c0       	rjmp	.+238    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7c4:	e8 ee       	ldi	r30, 0xE8	; 232
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	87 7f       	andi	r24, 0xF7	; 247
     7cc:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ce:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     7d0:	80 ff       	sbrs	r24, 0
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     7d4:	4c 89       	ldd	r20, Y+20	; 0x14
     7d6:	5d 89       	ldd	r21, Y+21	; 0x15
     7d8:	6e 89       	ldd	r22, Y+22	; 0x16
     7da:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     7dc:	e1 ef       	ldi	r30, 0xF1	; 241
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	40 83       	st	Z, r20
				UEDATX = (Data >> 8);
     7e2:	bb 27       	eor	r27, r27
     7e4:	a7 2f       	mov	r26, r23
     7e6:	96 2f       	mov	r25, r22
     7e8:	85 2f       	mov	r24, r21
     7ea:	80 83       	st	Z, r24
				UEDATX = (Data >> 16);
     7ec:	cb 01       	movw	r24, r22
     7ee:	aa 27       	eor	r26, r26
     7f0:	bb 27       	eor	r27, r27
     7f2:	80 83       	st	Z, r24
				UEDATX = (Data >> 24);
     7f4:	47 2f       	mov	r20, r23
     7f6:	55 27       	eor	r21, r21
     7f8:	66 27       	eor	r22, r22
     7fa:	77 27       	eor	r23, r23
     7fc:	40 83       	st	Z, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     7fe:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     800:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     802:	89 8d       	ldd	r24, Y+25	; 0x19
     804:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     806:	8a 8d       	ldd	r24, Y+26	; 0x1a
     808:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     80a:	e8 ee       	ldi	r30, 0xE8	; 232
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8e 77       	andi	r24, 0x7E	; 126
     812:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     814:	68 d2       	rcall	.+1232   	; 0xce6 <Endpoint_ClearStatusStage>
     816:	4d c0       	rjmp	.+154    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     818:	80 91 41 01 	lds	r24, 0x0141
     81c:	81 32       	cpi	r24, 0x21	; 33
     81e:	09 f0       	breq	.+2      	; 0x822 <CDC_Device_ProcessControlRequest+0xaa>
     820:	48 c0       	rjmp	.+144    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     822:	e8 ee       	ldi	r30, 0xE8	; 232
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	87 7f       	andi	r24, 0xF7	; 247
     82a:	80 83       	st	Z, r24
     82c:	05 c0       	rjmp	.+10     	; 0x838 <CDC_Device_ProcessControlRequest+0xc0>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     82e:	80 91 40 01 	lds	r24, 0x0140
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <CDC_Device_ProcessControlRequest+0xc0>
     836:	3d c0       	rjmp	.+122    	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     838:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     83a:	82 ff       	sbrs	r24, 2
     83c:	f8 cf       	rjmp	.-16     	; 0x82e <CDC_Device_ProcessControlRequest+0xb6>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     83e:	e1 ef       	ldi	r30, 0xF1	; 241
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     844:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     846:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     848:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     84a:	3c 8b       	std	Y+20, r19	; 0x14
     84c:	2d 8b       	std	Y+21, r18	; 0x15
     84e:	9e 8b       	std	Y+22, r25	; 0x16
     850:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     852:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     854:	88 8f       	std	Y+24, r24	; 0x18
     856:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     85c:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     85e:	e8 ee       	ldi	r30, 0xE8	; 232
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	8b 77       	andi	r24, 0x7B	; 123
     866:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     868:	3e d2       	rcall	.+1148   	; 0xce6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     86a:	ce 01       	movw	r24, r28
     86c:	84 df       	rcall	.-248    	; 0x776 <CDC_Device_Event_Stub>
     86e:	21 c0       	rjmp	.+66     	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     870:	80 91 41 01 	lds	r24, 0x0141
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	e9 f4       	brne	.+58     	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     878:	e8 ee       	ldi	r30, 0xE8	; 232
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	87 7f       	andi	r24, 0xF7	; 247
     880:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     882:	31 d2       	rcall	.+1122   	; 0xce6 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     884:	80 91 43 01 	lds	r24, 0x0143
     888:	90 91 44 01 	lds	r25, 0x0144
     88c:	99 8b       	std	Y+17, r25	; 0x11
     88e:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     890:	ce 01       	movw	r24, r28
     892:	71 df       	rcall	.-286    	; 0x776 <CDC_Device_Event_Stub>
     894:	0e c0       	rjmp	.+28     	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     896:	80 91 41 01 	lds	r24, 0x0141
     89a:	81 32       	cpi	r24, 0x21	; 33
     89c:	51 f4       	brne	.+20     	; 0x8b2 <CDC_Device_ProcessControlRequest+0x13a>
     89e:	e8 ee       	ldi	r30, 0xE8	; 232
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	87 7f       	andi	r24, 0xF7	; 247
     8a6:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     8a8:	1e d2       	rcall	.+1084   	; 0xce6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     8aa:	60 91 43 01 	lds	r22, 0x0143
     8ae:	ce 01       	movw	r24, r28
     8b0:	62 df       	rcall	.-316    	; 0x776 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8b8:	7f 92       	push	r7
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	7c 01       	movw	r14, r24
     8d4:	eb 01       	movw	r28, r22
     8d6:	6a 01       	movw	r12, r20
     8d8:	2b d2       	rcall	.+1110   	; 0xd30 <Endpoint_WaitUntilReady>
     8da:	78 2e       	mov	r7, r24
     8dc:	81 11       	cpse	r24, r1
     8de:	3e c0       	rjmp	.+124    	; 0x95c <Endpoint_Write_Stream_LE+0xa4>
     8e0:	c1 14       	cp	r12, r1
     8e2:	d1 04       	cpc	r13, r1
     8e4:	39 f0       	breq	.+14     	; 0x8f4 <Endpoint_Write_Stream_LE+0x3c>
     8e6:	f6 01       	movw	r30, r12
     8e8:	20 81       	ld	r18, Z
     8ea:	31 81       	ldd	r19, Z+1	; 0x01
     8ec:	c2 1b       	sub	r28, r18
     8ee:	d3 0b       	sbc	r29, r19
     8f0:	e2 0e       	add	r14, r18
     8f2:	f3 1e       	adc	r15, r19
     8f4:	20 97       	sbiw	r28, 0x00	; 0
     8f6:	91 f1       	breq	.+100    	; 0x95c <Endpoint_Write_Stream_LE+0xa4>
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f8 ee       	ldi	r31, 0xE8	; 232
     900:	8f 2e       	mov	r8, r31
     902:	91 2c       	mov	r9, r1
     904:	f0 2d       	mov	r31, r0
     906:	0f 2e       	mov	r0, r31
     908:	f1 ef       	ldi	r31, 0xF1	; 241
     90a:	af 2e       	mov	r10, r31
     90c:	b1 2c       	mov	r11, r1
     90e:	f0 2d       	mov	r31, r0
     910:	f4 01       	movw	r30, r8
     912:	90 81       	ld	r25, Z
     914:	95 fd       	sbrc	r25, 5
     916:	16 c0       	rjmp	.+44     	; 0x944 <Endpoint_Write_Stream_LE+0x8c>
     918:	80 81       	ld	r24, Z
     91a:	8e 77       	andi	r24, 0x7E	; 126
     91c:	80 83       	st	Z, r24
     91e:	c1 14       	cp	r12, r1
     920:	d1 04       	cpc	r13, r1
     922:	61 f0       	breq	.+24     	; 0x93c <Endpoint_Write_Stream_LE+0x84>
     924:	f6 01       	movw	r30, r12
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	08 0f       	add	r16, r24
     92c:	19 1f       	adc	r17, r25
     92e:	11 83       	std	Z+1, r17	; 0x01
     930:	00 83       	st	Z, r16
     932:	0f 2e       	mov	r0, r31
     934:	f5 e0       	ldi	r31, 0x05	; 5
     936:	7f 2e       	mov	r7, r31
     938:	f0 2d       	mov	r31, r0
     93a:	10 c0       	rjmp	.+32     	; 0x95c <Endpoint_Write_Stream_LE+0xa4>
     93c:	f9 d1       	rcall	.+1010   	; 0xd30 <Endpoint_WaitUntilReady>
     93e:	88 23       	and	r24, r24
     940:	49 f0       	breq	.+18     	; 0x954 <Endpoint_Write_Stream_LE+0x9c>
     942:	0b c0       	rjmp	.+22     	; 0x95a <Endpoint_Write_Stream_LE+0xa2>
     944:	f7 01       	movw	r30, r14
     946:	81 91       	ld	r24, Z+
     948:	7f 01       	movw	r14, r30
     94a:	f5 01       	movw	r30, r10
     94c:	80 83       	st	Z, r24
     94e:	21 97       	sbiw	r28, 0x01	; 1
     950:	0f 5f       	subi	r16, 0xFF	; 255
     952:	1f 4f       	sbci	r17, 0xFF	; 255
     954:	20 97       	sbiw	r28, 0x00	; 0
     956:	e1 f6       	brne	.-72     	; 0x910 <Endpoint_Write_Stream_LE+0x58>
     958:	01 c0       	rjmp	.+2      	; 0x95c <Endpoint_Write_Stream_LE+0xa4>
     95a:	78 2e       	mov	r7, r24
     95c:	87 2d       	mov	r24, r7
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	9f 90       	pop	r9
     974:	8f 90       	pop	r8
     976:	7f 90       	pop	r7
     978:	08 95       	ret

0000097a <Endpoint_Write_Control_Stream_LE>:
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	20 91 47 01 	lds	r18, 0x0147
     986:	30 91 48 01 	lds	r19, 0x0148
     98a:	26 17       	cp	r18, r22
     98c:	37 07       	cpc	r19, r23
     98e:	58 f0       	brcs	.+22     	; 0x9a6 <Endpoint_Write_Control_Stream_LE+0x2c>
     990:	61 15       	cp	r22, r1
     992:	71 05       	cpc	r23, r1
     994:	39 f4       	brne	.+14     	; 0x9a4 <Endpoint_Write_Control_Stream_LE+0x2a>
     996:	e8 ee       	ldi	r30, 0xE8	; 232
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	20 81       	ld	r18, Z
     99c:	2e 77       	andi	r18, 0x7E	; 126
     99e:	20 83       	st	Z, r18
     9a0:	9b 01       	movw	r18, r22
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <Endpoint_Write_Control_Stream_LE+0x2c>
     9a4:	9b 01       	movw	r18, r22
     9a6:	e0 e0       	ldi	r30, 0x00	; 0
     9a8:	a8 ee       	ldi	r26, 0xE8	; 232
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	62 ef       	ldi	r22, 0xF2	; 242
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	11 e0       	ldi	r17, 0x01	; 1
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	c1 ef       	ldi	r28, 0xF1	; 241
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	32 c0       	rjmp	.+100    	; 0xa1e <Endpoint_Write_Control_Stream_LE+0xa4>
     9ba:	40 91 40 01 	lds	r20, 0x0140
     9be:	44 23       	and	r20, r20
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <Endpoint_Write_Control_Stream_LE+0x4a>
     9c2:	41 c0       	rjmp	.+130    	; 0xa46 <Endpoint_Write_Control_Stream_LE+0xcc>
     9c4:	45 30       	cpi	r20, 0x05	; 5
     9c6:	09 f4       	brne	.+2      	; 0x9ca <Endpoint_Write_Control_Stream_LE+0x50>
     9c8:	40 c0       	rjmp	.+128    	; 0xa4a <Endpoint_Write_Control_Stream_LE+0xd0>
     9ca:	4c 91       	ld	r20, X
     9cc:	43 fd       	sbrc	r20, 3
     9ce:	3f c0       	rjmp	.+126    	; 0xa4e <Endpoint_Write_Control_Stream_LE+0xd4>
     9d0:	4c 91       	ld	r20, X
     9d2:	42 fd       	sbrc	r20, 2
     9d4:	31 c0       	rjmp	.+98     	; 0xa38 <Endpoint_Write_Control_Stream_LE+0xbe>
     9d6:	4c 91       	ld	r20, X
     9d8:	40 ff       	sbrs	r20, 0
     9da:	21 c0       	rjmp	.+66     	; 0xa1e <Endpoint_Write_Control_Stream_LE+0xa4>
     9dc:	fb 01       	movw	r30, r22
     9de:	40 81       	ld	r20, Z
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	21 15       	cp	r18, r1
     9e4:	31 05       	cpc	r19, r1
     9e6:	99 f0       	breq	.+38     	; 0xa0e <Endpoint_Write_Control_Stream_LE+0x94>
     9e8:	48 30       	cpi	r20, 0x08	; 8
     9ea:	51 05       	cpc	r21, r1
     9ec:	80 f4       	brcc	.+32     	; 0xa0e <Endpoint_Write_Control_Stream_LE+0x94>
     9ee:	e8 2f       	mov	r30, r24
     9f0:	f9 2f       	mov	r31, r25
     9f2:	81 91       	ld	r24, Z+
     9f4:	88 83       	st	Y, r24
     9f6:	8e 2f       	mov	r24, r30
     9f8:	9f 2f       	mov	r25, r31
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	31 09       	sbc	r19, r1
     9fe:	4f 5f       	subi	r20, 0xFF	; 255
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	21 15       	cp	r18, r1
     a04:	31 05       	cpc	r19, r1
     a06:	19 f0       	breq	.+6      	; 0xa0e <Endpoint_Write_Control_Stream_LE+0x94>
     a08:	48 30       	cpi	r20, 0x08	; 8
     a0a:	51 05       	cpc	r21, r1
     a0c:	91 f7       	brne	.-28     	; 0x9f2 <Endpoint_Write_Control_Stream_LE+0x78>
     a0e:	e1 2f       	mov	r30, r17
     a10:	48 30       	cpi	r20, 0x08	; 8
     a12:	51 05       	cpc	r21, r1
     a14:	09 f0       	breq	.+2      	; 0xa18 <Endpoint_Write_Control_Stream_LE+0x9e>
     a16:	e0 2f       	mov	r30, r16
     a18:	4c 91       	ld	r20, X
     a1a:	4e 77       	andi	r20, 0x7E	; 126
     a1c:	4c 93       	st	X, r20
     a1e:	21 15       	cp	r18, r1
     a20:	31 05       	cpc	r19, r1
     a22:	59 f6       	brne	.-106    	; 0x9ba <Endpoint_Write_Control_Stream_LE+0x40>
     a24:	e1 11       	cpse	r30, r1
     a26:	c9 cf       	rjmp	.-110    	; 0x9ba <Endpoint_Write_Control_Stream_LE+0x40>
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <Endpoint_Write_Control_Stream_LE+0xbe>
     a2a:	80 91 40 01 	lds	r24, 0x0140
     a2e:	88 23       	and	r24, r24
     a30:	81 f0       	breq	.+32     	; 0xa52 <Endpoint_Write_Control_Stream_LE+0xd8>
     a32:	85 30       	cpi	r24, 0x05	; 5
     a34:	19 f4       	brne	.+6      	; 0xa3c <Endpoint_Write_Control_Stream_LE+0xc2>
     a36:	0f c0       	rjmp	.+30     	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xdc>
     a38:	e8 ee       	ldi	r30, 0xE8	; 232
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	82 ff       	sbrs	r24, 2
     a40:	f4 cf       	rjmp	.-24     	; 0xa2a <Endpoint_Write_Control_Stream_LE+0xb0>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	09 c0       	rjmp	.+18     	; 0xa58 <Endpoint_Write_Control_Stream_LE+0xde>
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <Endpoint_Write_Control_Stream_LE+0xde>
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <Endpoint_Write_Control_Stream_LE+0xde>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <Endpoint_Write_Control_Stream_LE+0xde>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <Endpoint_Write_Control_Stream_LE+0xde>
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a6c:	20 91 47 01 	lds	r18, 0x0147
     a70:	30 91 48 01 	lds	r19, 0x0148
     a74:	26 17       	cp	r18, r22
     a76:	37 07       	cpc	r19, r23
     a78:	58 f0       	brcs	.+22     	; 0xa90 <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a7a:	61 15       	cp	r22, r1
     a7c:	71 05       	cpc	r23, r1
     a7e:	39 f4       	brne	.+14     	; 0xa8e <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a80:	e8 ee       	ldi	r30, 0xE8	; 232
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 81       	ld	r18, Z
     a86:	2e 77       	andi	r18, 0x7E	; 126
     a88:	20 83       	st	Z, r18
     a8a:	9b 01       	movw	r18, r22
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <Endpoint_Write_Control_PStream_LE+0x2e>
     a8e:	9b 01       	movw	r18, r22
     a90:	e8 2f       	mov	r30, r24
     a92:	f9 2f       	mov	r31, r25
     a94:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a96:	a8 ee       	ldi	r26, 0xE8	; 232
     a98:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a9a:	42 ef       	ldi	r20, 0xF2	; 242
     a9c:	50 e0       	ldi	r21, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f1 ef       	ldi	r31, 0xF1	; 241
     aa6:	ef 2e       	mov	r14, r31
     aa8:	f1 2c       	mov	r15, r1
     aaa:	f0 2d       	mov	r31, r0
     aac:	2e c0       	rjmp	.+92     	; 0xb0a <Endpoint_Write_Control_PStream_LE+0xa8>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aae:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ab2:	88 23       	and	r24, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <Endpoint_Write_Control_PStream_LE+0x56>
     ab6:	3d c0       	rjmp	.+122    	; 0xb32 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab8:	85 30       	cpi	r24, 0x05	; 5
     aba:	09 f4       	brne	.+2      	; 0xabe <Endpoint_Write_Control_PStream_LE+0x5c>
     abc:	3c c0       	rjmp	.+120    	; 0xb36 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     abe:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ac0:	83 fd       	sbrc	r24, 3
     ac2:	3b c0       	rjmp	.+118    	; 0xb3a <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ac4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ac6:	82 fd       	sbrc	r24, 2
     ac8:	2d c0       	rjmp	.+90     	; 0xb24 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     aca:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     acc:	80 ff       	sbrs	r24, 0
     ace:	1d c0       	rjmp	.+58     	; 0xb0a <Endpoint_Write_Control_PStream_LE+0xa8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ad0:	ea 01       	movw	r28, r20
     ad2:	88 81       	ld	r24, Y
     ad4:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ad6:	21 15       	cp	r18, r1
     ad8:	31 05       	cpc	r19, r1
     ada:	81 f0       	breq	.+32     	; 0xafc <Endpoint_Write_Control_PStream_LE+0x9a>
     adc:	88 30       	cpi	r24, 0x08	; 8
     ade:	91 05       	cpc	r25, r1
     ae0:	68 f4       	brcc	.+26     	; 0xafc <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ae2:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ae4:	e7 01       	movw	r28, r14
     ae6:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ae8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     aee:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     af0:	21 15       	cp	r18, r1
     af2:	31 05       	cpc	r19, r1
     af4:	19 f0       	breq	.+6      	; 0xafc <Endpoint_Write_Control_PStream_LE+0x9a>
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	91 05       	cpc	r25, r1
     afa:	99 f7       	brne	.-26     	; 0xae2 <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     afc:	67 2f       	mov	r22, r23
     afe:	08 97       	sbiw	r24, 0x08	; 8
     b00:	09 f0       	breq	.+2      	; 0xb04 <Endpoint_Write_Control_PStream_LE+0xa2>
     b02:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b04:	8c 91       	ld	r24, X
     b06:	8e 77       	andi	r24, 0x7E	; 126
     b08:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b0a:	21 15       	cp	r18, r1
     b0c:	31 05       	cpc	r19, r1
     b0e:	79 f6       	brne	.-98     	; 0xaae <Endpoint_Write_Control_PStream_LE+0x4c>
     b10:	61 11       	cpse	r22, r1
     b12:	cd cf       	rjmp	.-102    	; 0xaae <Endpoint_Write_Control_PStream_LE+0x4c>
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <Endpoint_Write_Control_PStream_LE+0xc2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b16:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b1a:	88 23       	and	r24, r24
     b1c:	81 f0       	breq	.+32     	; 0xb3e <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b1e:	85 30       	cpi	r24, 0x05	; 5
     b20:	19 f4       	brne	.+6      	; 0xb28 <Endpoint_Write_Control_PStream_LE+0xc6>
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b24:	e8 ee       	ldi	r30, 0xE8	; 232
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b2a:	82 ff       	sbrs	r24, 2
     b2c:	f4 cf       	rjmp	.-24     	; 0xb16 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b42:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	85 30       	cpi	r24, 0x05	; 5
     b68:	70 f1       	brcs	.+92     	; 0xbc6 <Endpoint_ConfigureEndpoint_Prv+0x76>
     b6a:	26 c0       	rjmp	.+76     	; 0xbb8 <Endpoint_ConfigureEndpoint_Prv+0x68>
     b6c:	59 2f       	mov	r21, r25
     b6e:	5f 70       	andi	r21, 0x0F	; 15
     b70:	e8 01       	movw	r28, r16
     b72:	58 83       	st	Y, r21
     b74:	89 17       	cp	r24, r25
     b76:	31 f0       	breq	.+12     	; 0xb84 <Endpoint_ConfigureEndpoint_Prv+0x34>
     b78:	e9 01       	movw	r28, r18
     b7a:	d8 80       	ld	r13, Y
     b7c:	50 81       	ld	r21, Z
     b7e:	e4 01       	movw	r28, r8
     b80:	78 81       	ld	r23, Y
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     b84:	5b 2d       	mov	r21, r11
     b86:	d6 2e       	mov	r13, r22
     b88:	7c 2d       	mov	r23, r12
     b8a:	51 ff       	sbrs	r21, 1
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <Endpoint_ConfigureEndpoint_Prv+0x62>
     b8e:	4c 91       	ld	r20, X
     b90:	4e 7f       	andi	r20, 0xFE	; 254
     b92:	4c 93       	st	X, r20
     b94:	40 81       	ld	r20, Z
     b96:	4d 7f       	andi	r20, 0xFD	; 253
     b98:	40 83       	st	Z, r20
     b9a:	4c 91       	ld	r20, X
     b9c:	41 60       	ori	r20, 0x01	; 1
     b9e:	4c 93       	st	X, r20
     ba0:	e9 01       	movw	r28, r18
     ba2:	d8 82       	st	Y, r13
     ba4:	50 83       	st	Z, r21
     ba6:	e4 01       	movw	r28, r8
     ba8:	78 83       	st	Y, r23
     baa:	e7 01       	movw	r28, r14
     bac:	58 81       	ld	r21, Y
     bae:	55 23       	and	r21, r21
     bb0:	44 f4       	brge	.+16     	; 0xbc2 <Endpoint_ConfigureEndpoint_Prv+0x72>
     bb2:	9f 5f       	subi	r25, 0xFF	; 255
     bb4:	95 30       	cpi	r25, 0x05	; 5
     bb6:	d1 f6       	brne	.-76     	; 0xb6c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     bb8:	8f 70       	andi	r24, 0x0F	; 15
     bba:	80 93 e9 00 	sts	0x00E9, r24
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	1f c0       	rjmp	.+62     	; 0xc00 <Endpoint_ConfigureEndpoint_Prv+0xb0>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <Endpoint_ConfigureEndpoint_Prv+0xb0>
     bc6:	98 2f       	mov	r25, r24
     bc8:	9f 70       	andi	r25, 0x0F	; 15
     bca:	90 93 e9 00 	sts	0x00E9, r25
     bce:	98 2f       	mov	r25, r24
     bd0:	54 2f       	mov	r21, r20
     bd2:	d6 2e       	mov	r13, r22
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	ab ee       	ldi	r26, 0xEB	; 235
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ed ee       	ldi	r30, 0xED	; 237
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	2c ee       	ldi	r18, 0xEC	; 236
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	0f 2e       	mov	r0, r31
     be4:	f0 ef       	ldi	r31, 0xF0	; 240
     be6:	8f 2e       	mov	r8, r31
     be8:	91 2c       	mov	r9, r1
     bea:	f0 2d       	mov	r31, r0
     bec:	0f 2e       	mov	r0, r31
     bee:	fe ee       	ldi	r31, 0xEE	; 238
     bf0:	ef 2e       	mov	r14, r31
     bf2:	f1 2c       	mov	r15, r1
     bf4:	f0 2d       	mov	r31, r0
     bf6:	09 ee       	ldi	r16, 0xE9	; 233
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	b4 2e       	mov	r11, r20
     bfc:	c1 2c       	mov	r12, r1
     bfe:	c5 cf       	rjmp	.-118    	; 0xb8a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	08 95       	ret

00000c18 <Endpoint_ConfigureEndpointTable>:
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	c6 2e       	mov	r12, r22
     c30:	66 23       	and	r22, r22
     c32:	09 f4       	brne	.+2      	; 0xc36 <Endpoint_ConfigureEndpointTable+0x1e>
     c34:	47 c0       	rjmp	.+142    	; 0xcc4 <Endpoint_ConfigureEndpointTable+0xac>
     c36:	ec 01       	movw	r28, r24
     c38:	8c 01       	movw	r16, r24
     c3a:	0c 5f       	subi	r16, 0xFC	; 252
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	d1 2c       	mov	r13, r1
     c40:	b1 2c       	mov	r11, r1
     c42:	68 94       	set
     c44:	ee 24       	eor	r14, r14
     c46:	e3 f8       	bld	r14, 3
     c48:	f1 2c       	mov	r15, r1
     c4a:	68 94       	set
     c4c:	99 24       	eor	r9, r9
     c4e:	91 f8       	bld	r9, 1
     c50:	0f 2e       	mov	r0, r31
     c52:	f6 e0       	ldi	r31, 0x06	; 6
     c54:	af 2e       	mov	r10, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	58 81       	ld	r21, Y
     c5a:	55 23       	and	r21, r21
     c5c:	59 f1       	breq	.+86     	; 0xcb4 <Endpoint_ConfigureEndpointTable+0x9c>
     c5e:	f8 01       	movw	r30, r16
     c60:	90 81       	ld	r25, Z
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	d8 01       	movw	r26, r16
     c68:	11 97       	sbiw	r26, 0x01	; 1
     c6a:	6c 91       	ld	r22, X
     c6c:	85 2f       	mov	r24, r21
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	85 30       	cpi	r24, 0x05	; 5
     c72:	50 f5       	brcc	.+84     	; 0xcc8 <Endpoint_ConfigureEndpointTable+0xb0>
     c74:	92 30       	cpi	r25, 0x02	; 2
     c76:	10 f0       	brcs	.+4      	; 0xc7c <Endpoint_ConfigureEndpointTable+0x64>
     c78:	4a 2d       	mov	r20, r10
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <Endpoint_ConfigureEndpointTable+0x66>
     c7c:	49 2d       	mov	r20, r9
     c7e:	e9 30       	cpi	r30, 0x09	; 9
     c80:	f1 05       	cpc	r31, r1
     c82:	48 f0       	brcs	.+18     	; 0xc96 <Endpoint_ConfigureEndpointTable+0x7e>
     c84:	97 01       	movw	r18, r14
     c86:	9b 2d       	mov	r25, r11
     c88:	9f 5f       	subi	r25, 0xFF	; 255
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	2e 17       	cp	r18, r30
     c90:	3f 07       	cpc	r19, r31
     c92:	d0 f3       	brcs	.-12     	; 0xc88 <Endpoint_ConfigureEndpointTable+0x70>
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <Endpoint_ConfigureEndpointTable+0x80>
     c96:	9b 2d       	mov	r25, r11
     c98:	92 95       	swap	r25
     c9a:	90 7f       	andi	r25, 0xF0	; 240
     c9c:	49 2b       	or	r20, r25
     c9e:	62 95       	swap	r22
     ca0:	66 0f       	add	r22, r22
     ca2:	66 0f       	add	r22, r22
     ca4:	60 7c       	andi	r22, 0xC0	; 192
     ca6:	55 1f       	adc	r21, r21
     ca8:	55 27       	eor	r21, r21
     caa:	55 1f       	adc	r21, r21
     cac:	65 2b       	or	r22, r21
     cae:	50 df       	rcall	.-352    	; 0xb50 <Endpoint_ConfigureEndpoint_Prv>
     cb0:	88 23       	and	r24, r24
     cb2:	61 f0       	breq	.+24     	; 0xccc <Endpoint_ConfigureEndpointTable+0xb4>
     cb4:	d3 94       	inc	r13
     cb6:	25 96       	adiw	r28, 0x05	; 5
     cb8:	0b 5f       	subi	r16, 0xFB	; 251
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	dc 10       	cpse	r13, r12
     cbe:	cc cf       	rjmp	.-104    	; 0xc58 <Endpoint_ConfigureEndpointTable+0x40>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <Endpoint_ConfigureEndpointTable+0xb6>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <Endpoint_ConfigureEndpointTable+0xb6>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	01 c0       	rjmp	.+2      	; 0xcce <Endpoint_ConfigureEndpointTable+0xb6>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	08 95       	ret

00000ce6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ce6:	80 91 41 01 	lds	r24, 0x0141
     cea:	88 23       	and	r24, r24
     cec:	b4 f4       	brge	.+44     	; 0xd1a <Endpoint_ClearStatusStage+0x34>
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <Endpoint_ClearStatusStage+0x14>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     cf0:	80 91 40 01 	lds	r24, 0x0140
     cf4:	81 11       	cpse	r24, r1
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <Endpoint_ClearStatusStage+0x18>
     cf8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cfa:	e8 ee       	ldi	r30, 0xE8	; 232
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     d00:	82 ff       	sbrs	r24, 2
     d02:	f6 cf       	rjmp	.-20     	; 0xcf0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d04:	e8 ee       	ldi	r30, 0xE8	; 232
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8b 77       	andi	r24, 0x7B	; 123
     d0c:	80 83       	st	Z, r24
     d0e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d10:	80 91 40 01 	lds	r24, 0x0140
     d14:	81 11       	cpse	r24, r1
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <Endpoint_ClearStatusStage+0x38>
     d18:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d1a:	e8 ee       	ldi	r30, 0xE8	; 232
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d20:	80 ff       	sbrs	r24, 0
     d22:	f6 cf       	rjmp	.-20     	; 0xd10 <Endpoint_ClearStatusStage+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d24:	e8 ee       	ldi	r30, 0xE8	; 232
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8e 77       	andi	r24, 0x7E	; 126
     d2c:	80 83       	st	Z, r24
     d2e:	08 95       	ret

00000d30 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d38:	20 91 e4 00 	lds	r18, 0x00E4
     d3c:	30 91 e5 00 	lds	r19, 0x00E5
     d40:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d42:	ac ee       	ldi	r26, 0xEC	; 236
     d44:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d46:	e8 ee       	ldi	r30, 0xE8	; 232
     d48:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d4a:	0b ee       	ldi	r16, 0xEB	; 235
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	44 ee       	ldi	r20, 0xE4	; 228
     d50:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d52:	8c 91       	ld	r24, X
     d54:	80 fd       	sbrc	r24, 0
     d56:	20 c0       	rjmp	.+64     	; 0xd98 <Endpoint_WaitUntilReady+0x68>
     d58:	23 c0       	rjmp	.+70     	; 0xda0 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d5a:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d5e:	88 23       	and	r24, r24
     d60:	89 f0       	breq	.+34     	; 0xd84 <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d62:	85 30       	cpi	r24, 0x05	; 5
     d64:	89 f0       	breq	.+34     	; 0xd88 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d66:	e8 01       	movw	r28, r16
     d68:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d6a:	85 fd       	sbrc	r24, 5
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <Endpoint_WaitUntilReady+0x5c>
     d6e:	ea 01       	movw	r28, r20
     d70:	88 81       	ld	r24, Y
     d72:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	61 f3       	breq	.-40     	; 0xd52 <Endpoint_WaitUntilReady+0x22>
     d7a:	61 50       	subi	r22, 0x01	; 1
     d7c:	9c 01       	movw	r18, r24
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d7e:	49 f7       	brne	.-46     	; 0xd52 <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_Timeout;
     d80:	84 e0       	ldi	r24, 0x04	; 4
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	10 c0       	rjmp	.+32     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d98:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d9a:	80 ff       	sbrs	r24, 0
     d9c:	de cf       	rjmp	.-68     	; 0xd5a <Endpoint_WaitUntilReady+0x2a>
     d9e:	f8 cf       	rjmp	.-16     	; 0xd90 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     da0:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     da2:	82 ff       	sbrs	r24, 2
     da4:	da cf       	rjmp	.-76     	; 0xd5a <Endpoint_WaitUntilReady+0x2a>
     da6:	f6 cf       	rjmp	.-20     	; 0xd94 <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     db2:	3b d0       	rcall	.+118    	; 0xe2a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     db4:	3d d0       	rcall	.+122    	; 0xe30 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     db6:	e8 ed       	ldi	r30, 0xD8	; 216
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     dc0:	80 81       	ld	r24, Z
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     dd4:	09 b4       	in	r0, 0x29	; 41
     dd6:	00 fe       	sbrs	r0, 0
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     dda:	10 92 40 01 	sts	0x0140, r1
	USB_Device_ConfigurationNumber  = 0;
     dde:	10 92 3c 01 	sts	0x013C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     de2:	10 92 3e 01 	sts	0x013E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     de6:	10 92 3d 01 	sts	0x013D, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     dea:	42 e0       	ldi	r20, 0x02	; 2
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	af de       	rcall	.-674    	; 0xb50 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     df2:	e1 ee       	ldi	r30, 0xE1	; 225
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dfc:	e2 ee       	ldi	r30, 0xE2	; 226
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e06:	80 81       	ld	r24, Z
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e0c:	e0 ee       	ldi	r30, 0xE0	; 224
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8e 7f       	andi	r24, 0xFE	; 254
     e14:	80 83       	st	Z, r24
     e16:	08 95       	ret

00000e18 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     e18:	e3 e6       	ldi	r30, 0x63	; 99
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8e 7f       	andi	r24, 0xFE	; 254
     e20:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	80 93 3f 01 	sts	0x013F, r24

	USB_ResetInterface();
     e28:	c4 cf       	rjmp	.-120    	; 0xdb2 <USB_ResetInterface>

00000e2a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e2a:	10 92 e2 00 	sts	0x00E2, r1
     e2e:	08 95       	ret

00000e30 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e30:	10 92 e1 00 	sts	0x00E1, r1
     e34:	08 95       	ret

00000e36 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e58:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e5c:	82 ff       	sbrs	r24, 2
     e5e:	0a c0       	rjmp	.+20     	; 0xe74 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e60:	80 91 e2 00 	lds	r24, 0x00E2
     e64:	82 ff       	sbrs	r24, 2
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e68:	e1 ee       	ldi	r30, 0xE1	; 225
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8b 7f       	andi	r24, 0xFB	; 251
     e70:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e72:	48 d2       	rcall	.+1168   	; 0x1304 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     e74:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e78:	80 ff       	sbrs	r24, 0
     e7a:	15 c0       	rjmp	.+42     	; 0xea6 <__vector_11+0x70>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e7c:	80 91 e2 00 	lds	r24, 0x00E2
     e80:	80 ff       	sbrs	r24, 0
     e82:	11 c0       	rjmp	.+34     	; 0xea6 <__vector_11+0x70>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e84:	e2 ee       	ldi	r30, 0xE2	; 226
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8e 7f       	andi	r24, 0xFE	; 254
     e8c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e8e:	80 81       	ld	r24, Z
     e90:	80 61       	ori	r24, 0x10	; 16
     e92:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     e94:	e8 ed       	ldi	r30, 0xD8	; 216
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 62       	ori	r24, 0x20	; 32
     e9c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e9e:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     ea0:	10 92 40 01 	sts	0x0140, r1
		EVENT_USB_Device_Disconnect();
     ea4:	9f db       	rcall	.-2242   	; 0x5e4 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     ea6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     eaa:	84 ff       	sbrs	r24, 4
     eac:	2f c0       	rjmp	.+94     	; 0xf0c <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     eae:	80 91 e2 00 	lds	r24, 0x00E2
     eb2:	84 ff       	sbrs	r24, 4
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     eba:	86 e0       	ldi	r24, 0x06	; 6
     ebc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ebe:	09 b4       	in	r0, 0x29	; 41
     ec0:	00 fe       	sbrs	r0, 0
     ec2:	fd cf       	rjmp	.-6      	; 0xebe <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ec4:	e8 ed       	ldi	r30, 0xD8	; 216
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7d       	andi	r24, 0xDF	; 223
     ecc:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     ece:	e1 ee       	ldi	r30, 0xE1	; 225
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7e       	andi	r24, 0xEF	; 239
     ed6:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     ed8:	e2 ee       	ldi	r30, 0xE2	; 226
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ee2:	80 81       	ld	r24, Z
     ee4:	81 60       	ori	r24, 0x01	; 1
     ee6:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     ee8:	80 91 3c 01 	lds	r24, 0x013C
     eec:	88 23       	and	r24, r24
     eee:	21 f0       	breq	.+8      	; 0xef8 <__vector_11+0xc2>
		  USB_DeviceState = DEVICE_STATE_Configured;
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	80 93 40 01 	sts	0x0140, r24
     ef6:	09 c0       	rjmp	.+18     	; 0xf0a <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ef8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     efc:	88 23       	and	r24, r24
     efe:	14 f4       	brge	.+4      	; 0xf04 <__vector_11+0xce>
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <__vector_11+0xd0>
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 40 01 	sts	0x0140, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     f0a:	6b db       	rcall	.-2346   	; 0x5e2 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f0c:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f10:	83 ff       	sbrs	r24, 3
     f12:	23 c0       	rjmp	.+70     	; 0xf5a <__vector_11+0x124>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f14:	80 91 e2 00 	lds	r24, 0x00E2
     f18:	83 ff       	sbrs	r24, 3
     f1a:	1f c0       	rjmp	.+62     	; 0xf5a <__vector_11+0x124>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f1c:	e1 ee       	ldi	r30, 0xE1	; 225
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	80 93 40 01 	sts	0x0140, r24
		USB_Device_ConfigurationNumber = 0;
     f2c:	10 92 3c 01 	sts	0x013C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f30:	80 81       	ld	r24, Z
     f32:	8e 7f       	andi	r24, 0xFE	; 254
     f34:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f36:	e2 ee       	ldi	r30, 0xE2	; 226
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	01 de       	rcall	.-1022   	; 0xb50 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f4e:	e0 ef       	ldi	r30, 0xF0	; 240
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f58:	d5 d1       	rcall	.+938    	; 0x1304 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fa8:	80 91 e9 00 	lds	r24, 0x00E9
     fac:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fae:	90 91 ec 00 	lds	r25, 0x00EC
     fb2:	90 ff       	sbrs	r25, 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <__vector_12+0x3e>
     fb6:	90 e8       	ldi	r25, 0x80	; 128
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <__vector_12+0x40>
     fba:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fbc:	f9 2e       	mov	r15, r25
     fbe:	f8 2a       	or	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc0:	09 ee       	ldi	r16, 0xE9	; 233
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	f8 01       	movw	r30, r16
     fc6:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     fc8:	c0 ef       	ldi	r28, 0xF0	; 240
     fca:	d0 e0       	ldi	r29, 0x00	; 0
     fcc:	88 81       	ld	r24, Y
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     fd2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     fd4:	1e d0       	rcall	.+60     	; 0x1012 <USB_Device_ProcessControlRequest>
     fd6:	f8 01       	movw	r30, r16
     fd8:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     fda:	88 81       	ld	r24, Y
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	88 83       	st	Y, r24
     fe0:	8f 2d       	mov	r24, r15
     fe2:	8f 70       	andi	r24, 0x0F	; 15
     fe4:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	ac 97       	sbiw	r28, 0x2c	; 44
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    102a:	e1 e4       	ldi	r30, 0x41	; 65
    102c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    102e:	a1 ef       	ldi	r26, 0xF1	; 241
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	8c 91       	ld	r24, X

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1034:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	e9 34       	cpi	r30, 0x49	; 73
    103a:	f2 07       	cpc	r31, r18
    103c:	d1 f7       	brne	.-12     	; 0x1032 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    103e:	d6 da       	rcall	.-2644   	; 0x5ec <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1040:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1044:	83 ff       	sbrs	r24, 3
    1046:	39 c1       	rjmp	.+626    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1048:	90 91 41 01 	lds	r25, 0x0141

		switch (USB_ControlRequest.bRequest)
    104c:	80 91 42 01 	lds	r24, 0x0142
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	09 f4       	brne	.+2      	; 0x1056 <USB_Device_ProcessControlRequest+0x44>
    1054:	81 c0       	rjmp	.+258    	; 0x1158 <USB_Device_ProcessControlRequest+0x146>
    1056:	38 f4       	brcc	.+14     	; 0x1066 <USB_Device_ProcessControlRequest+0x54>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	d1 f1       	breq	.+116    	; 0x10d0 <USB_Device_ProcessControlRequest+0xbe>
    105c:	70 f0       	brcs	.+28     	; 0x107a <USB_Device_ProcessControlRequest+0x68>
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	09 f0       	breq	.+2      	; 0x1064 <USB_Device_ProcessControlRequest+0x52>
    1062:	2b c1       	rjmp	.+598    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
    1064:	35 c0       	rjmp	.+106    	; 0x10d0 <USB_Device_ProcessControlRequest+0xbe>
    1066:	88 30       	cpi	r24, 0x08	; 8
    1068:	09 f4       	brne	.+2      	; 0x106c <USB_Device_ProcessControlRequest+0x5a>
    106a:	f5 c0       	rjmp	.+490    	; 0x1256 <USB_Device_ProcessControlRequest+0x244>
    106c:	89 30       	cpi	r24, 0x09	; 9
    106e:	09 f4       	brne	.+2      	; 0x1072 <USB_Device_ProcessControlRequest+0x60>
    1070:	02 c1       	rjmp	.+516    	; 0x1276 <USB_Device_ProcessControlRequest+0x264>
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	09 f0       	breq	.+2      	; 0x1078 <USB_Device_ProcessControlRequest+0x66>
    1076:	21 c1       	rjmp	.+578    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
    1078:	96 c0       	rjmp	.+300    	; 0x11a6 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    107a:	90 38       	cpi	r25, 0x80	; 128
    107c:	21 f0       	breq	.+8      	; 0x1086 <USB_Device_ProcessControlRequest+0x74>
    107e:	92 38       	cpi	r25, 0x82	; 130
    1080:	09 f0       	breq	.+2      	; 0x1084 <USB_Device_ProcessControlRequest+0x72>
    1082:	1b c1       	rjmp	.+566    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1086:	80 91 3d 01 	lds	r24, 0x013D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    108a:	90 91 3e 01 	lds	r25, 0x013E
    108e:	99 23       	and	r25, r25
    1090:	89 f0       	breq	.+34     	; 0x10b4 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1092:	82 60       	ori	r24, 0x02	; 2
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1096:	80 91 45 01 	lds	r24, 0x0145
    109a:	90 91 46 01 	lds	r25, 0x0146
    109e:	8f 70       	andi	r24, 0x0F	; 15
    10a0:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10a2:	e9 ee       	ldi	r30, 0xE9	; 233
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10a8:	80 91 eb 00 	lds	r24, 0x00EB
    10ac:	85 fb       	bst	r24, 5
    10ae:	88 27       	eor	r24, r24
    10b0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10b2:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10b4:	e8 ee       	ldi	r30, 0xE8	; 232
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	90 81       	ld	r25, Z
    10ba:	97 7f       	andi	r25, 0xF7	; 247
    10bc:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10be:	a1 ef       	ldi	r26, 0xF1	; 241
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    10c4:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c6:	80 81       	ld	r24, Z
    10c8:	8e 77       	andi	r24, 0x7E	; 126
    10ca:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10cc:	0c de       	rcall	.-1000   	; 0xce6 <Endpoint_ClearStatusStage>
    10ce:	f5 c0       	rjmp	.+490    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10d0:	99 23       	and	r25, r25
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <USB_Device_ProcessControlRequest+0xc4>
    10d4:	01 c1       	rjmp	.+514    	; 0x12d8 <USB_Device_ProcessControlRequest+0x2c6>
    10d6:	92 30       	cpi	r25, 0x02	; 2
    10d8:	09 f0       	breq	.+2      	; 0x10dc <USB_Device_ProcessControlRequest+0xca>
    10da:	ef c0       	rjmp	.+478    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
    10dc:	02 c1       	rjmp	.+516    	; 0x12e2 <USB_Device_ProcessControlRequest+0x2d0>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <USB_Device_ProcessControlRequest+0xd4>
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	90 93 3e 01 	sts	0x013E, r25
    10ea:	2d c0       	rjmp	.+90     	; 0x1146 <USB_Device_ProcessControlRequest+0x134>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10ec:	80 91 45 01 	lds	r24, 0x0145
    10f0:	90 91 46 01 	lds	r25, 0x0146
    10f4:	8f 70       	andi	r24, 0x0F	; 15
    10f6:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <USB_Device_ProcessControlRequest+0xec>
    10fc:	de c0       	rjmp	.+444    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10fe:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1102:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1106:	20 ff       	sbrs	r18, 0
    1108:	1e c0       	rjmp	.+60     	; 0x1146 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    110a:	20 91 42 01 	lds	r18, 0x0142
    110e:	23 30       	cpi	r18, 0x03	; 3
    1110:	31 f4       	brne	.+12     	; 0x111e <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1112:	eb ee       	ldi	r30, 0xEB	; 235
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 62       	ori	r24, 0x20	; 32
    111a:	80 83       	st	Z, r24
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    111e:	eb ee       	ldi	r30, 0xEB	; 235
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	90 81       	ld	r25, Z
    1124:	90 61       	ori	r25, 0x10	; 16
    1126:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <USB_Device_ProcessControlRequest+0x122>
    1130:	44 0f       	add	r20, r20
    1132:	55 1f       	adc	r21, r21
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <USB_Device_ProcessControlRequest+0x11e>
    1138:	aa ee       	ldi	r26, 0xEA	; 234
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	4c 93       	st	X, r20
				UERST = 0;
    113e:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1140:	80 81       	ld	r24, Z
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1146:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114a:	e8 ee       	ldi	r30, 0xE8	; 232
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	87 7f       	andi	r24, 0xF7	; 247
    1152:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1154:	c8 dd       	rcall	.-1136   	; 0xce6 <Endpoint_ClearStatusStage>
    1156:	b1 c0       	rjmp	.+354    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1158:	91 11       	cpse	r25, r1
    115a:	af c0       	rjmp	.+350    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    115c:	80 91 43 01 	lds	r24, 0x0143
    1160:	90 91 44 01 	lds	r25, 0x0144
    1164:	8f 77       	andi	r24, 0x7F	; 127
    1166:	99 27       	eor	r25, r25
    1168:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    116a:	e3 ee       	ldi	r30, 0xE3	; 227
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	90 81       	ld	r25, Z
    1170:	90 78       	andi	r25, 0x80	; 128
    1172:	89 2b       	or	r24, r25
    1174:	80 83       	st	Z, r24
    1176:	e8 ee       	ldi	r30, 0xE8	; 232
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	87 7f       	andi	r24, 0xF7	; 247
    117e:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1180:	b2 dd       	rcall	.-1180   	; 0xce6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1182:	e8 ee       	ldi	r30, 0xE8	; 232
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1188:	80 ff       	sbrs	r24, 0
    118a:	fd cf       	rjmp	.-6      	; 0x1186 <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    118c:	e3 ee       	ldi	r30, 0xE3	; 227
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 68       	ori	r24, 0x80	; 128
    1194:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1196:	11 23       	and	r17, r17
    1198:	11 f0       	breq	.+4      	; 0x119e <USB_Device_ProcessControlRequest+0x18c>
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <USB_Device_ProcessControlRequest+0x18e>
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	80 93 40 01 	sts	0x0140, r24
    11a4:	8a c0       	rjmp	.+276    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11a6:	90 58       	subi	r25, 0x80	; 128
    11a8:	92 30       	cpi	r25, 0x02	; 2
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <USB_Device_ProcessControlRequest+0x19c>
    11ac:	86 c0       	rjmp	.+268    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11ae:	80 91 43 01 	lds	r24, 0x0143
    11b2:	90 91 44 01 	lds	r25, 0x0144
    11b6:	8c 3d       	cpi	r24, 0xDC	; 220
    11b8:	53 e0       	ldi	r21, 0x03	; 3
    11ba:	95 07       	cpc	r25, r21
    11bc:	99 f5       	brne	.+102    	; 0x1224 <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11c2:	8a e2       	ldi	r24, 0x2A	; 42
    11c4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11c6:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11c8:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    11ca:	de 01       	movw	r26, r28
    11cc:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11ce:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    11d0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11d2:	41 e2       	ldi	r20, 0x21	; 33
    11d4:	e3 2f       	mov	r30, r19
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	40 93 57 00 	sts	0x0057, r20
    11dc:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    11de:	20 ff       	sbrs	r18, 0
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
    11e2:	82 95       	swap	r24
    11e4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    11e6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11e8:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11ea:	8a 30       	cpi	r24, 0x0A	; 10
    11ec:	18 f0       	brcs	.+6      	; 0x11f4 <USB_Device_ProcessControlRequest+0x1e2>
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	c7 96       	adiw	r24, 0x37	; 55
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <USB_Device_ProcessControlRequest+0x1e6>
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	c0 96       	adiw	r24, 0x30	; 48
    11f8:	8d 93       	st	X+, r24
    11fa:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11fc:	2f 5f       	subi	r18, 0xFF	; 255
    11fe:	24 31       	cpi	r18, 0x14	; 20
    1200:	49 f7       	brne	.-46     	; 0x11d4 <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1202:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1204:	08 ee       	ldi	r16, 0xE8	; 232
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	f8 01       	movw	r30, r16
    120a:	80 81       	ld	r24, Z
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1210:	6a e2       	ldi	r22, 0x2A	; 42
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	b0 db       	rcall	.-2208   	; 0x97a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    121a:	f8 01       	movw	r30, r16
    121c:	80 81       	ld	r24, Z
    121e:	8b 77       	andi	r24, 0x7B	; 123
    1220:	80 83       	st	Z, r24
    1222:	4b c0       	rjmp	.+150    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1224:	ae 01       	movw	r20, r28
    1226:	45 5d       	subi	r20, 0xD5	; 213
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	60 91 45 01 	lds	r22, 0x0145
    122e:	0e 94 9b 00 	call	0x136	; 0x136 <CALLBACK_USB_GetDescriptor>
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	09 f4       	brne	.+2      	; 0x1238 <USB_Device_ProcessControlRequest+0x226>
    1236:	41 c0       	rjmp	.+130    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1238:	08 ee       	ldi	r16, 0xE8	; 232
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	f8 01       	movw	r30, r16
    123e:	20 81       	ld	r18, Z
    1240:	27 7f       	andi	r18, 0xF7	; 247
    1242:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1244:	bc 01       	movw	r22, r24
    1246:	8b a5       	ldd	r24, Y+43	; 0x2b
    1248:	9c a5       	ldd	r25, Y+44	; 0x2c
    124a:	0b dc       	rcall	.-2026   	; 0xa62 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    124c:	f8 01       	movw	r30, r16
    124e:	80 81       	ld	r24, Z
    1250:	8b 77       	andi	r24, 0x7B	; 123
    1252:	80 83       	st	Z, r24
    1254:	32 c0       	rjmp	.+100    	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1256:	90 38       	cpi	r25, 0x80	; 128
    1258:	81 f5       	brne	.+96     	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    125a:	e8 ee       	ldi	r30, 0xE8	; 232
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1264:	80 91 3c 01 	lds	r24, 0x013C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1268:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    126c:	80 81       	ld	r24, Z
    126e:	8e 77       	andi	r24, 0x7E	; 126
    1270:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1272:	39 dd       	rcall	.-1422   	; 0xce6 <Endpoint_ClearStatusStage>
    1274:	22 c0       	rjmp	.+68     	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1276:	91 11       	cpse	r25, r1
    1278:	20 c0       	rjmp	.+64     	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    127a:	80 91 43 01 	lds	r24, 0x0143
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	e0 f4       	brcc	.+56     	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1282:	e8 ee       	ldi	r30, 0xE8	; 232
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    128c:	80 91 43 01 	lds	r24, 0x0143
    1290:	80 93 3c 01 	sts	0x013C, r24

	Endpoint_ClearStatusStage();
    1294:	28 dd       	rcall	.-1456   	; 0xce6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1296:	80 91 3c 01 	lds	r24, 0x013C
    129a:	88 23       	and	r24, r24
    129c:	21 f0       	breq	.+8      	; 0x12a6 <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	80 93 40 01 	sts	0x0140, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12a6:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    12aa:	88 23       	and	r24, r24
    12ac:	14 f4       	brge	.+4      	; 0x12b2 <USB_Device_ProcessControlRequest+0x2a0>
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <USB_Device_ProcessControlRequest+0x2a2>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 40 01 	sts	0x0140, r24

	EVENT_USB_Device_ConfigurationChanged();
    12b8:	96 d9       	rcall	.-3284   	; 0x5e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ba:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12be:	83 ff       	sbrs	r24, 3
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <USB_Device_ProcessControlRequest+0x2dc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12c2:	e8 ee       	ldi	r30, 0xE8	; 232
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12cc:	eb ee       	ldi	r30, 0xEB	; 235
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	80 83       	st	Z, r24
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <USB_Device_ProcessControlRequest+0x2dc>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    12d8:	90 91 43 01 	lds	r25, 0x0143
    12dc:	91 30       	cpi	r25, 0x01	; 1
    12de:	69 f7       	brne	.-38     	; 0x12ba <USB_Device_ProcessControlRequest+0x2a8>
    12e0:	fe ce       	rjmp	.-516    	; 0x10de <USB_Device_ProcessControlRequest+0xcc>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    12e2:	80 91 43 01 	lds	r24, 0x0143
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <USB_Device_ProcessControlRequest+0x2da>
    12ea:	00 cf       	rjmp	.-512    	; 0x10ec <USB_Device_ProcessControlRequest+0xda>
    12ec:	2c cf       	rjmp	.-424    	; 0x1146 <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    12ee:	ac 96       	adiw	r28, 0x2c	; 44
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1304:	08 95       	ret

00001306 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1306:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1308:	80 91 40 01 	lds	r24, 0x0140
    130c:	88 23       	and	r24, r24
    130e:	a1 f0       	breq	.+40     	; 0x1338 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1310:	c0 91 e9 00 	lds	r28, 0x00E9
    1314:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1316:	80 91 ec 00 	lds	r24, 0x00EC
    131a:	80 ff       	sbrs	r24, 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <USB_USBTask+0x1c>
    131e:	80 e8       	ldi	r24, 0x80	; 128
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <USB_USBTask+0x1e>
    1322:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1324:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1326:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    132a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    132e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1330:	70 de       	rcall	.-800    	; 0x1012 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1332:	cf 70       	andi	r28, 0x0F	; 15
    1334:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <_exit>:
    133c:	f8 94       	cli

0000133e <__stop_program>:
    133e:	ff cf       	rjmp	.-2      	; 0x133e <__stop_program>
